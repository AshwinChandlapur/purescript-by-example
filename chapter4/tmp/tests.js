// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function eqArrayImpl(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function numShl(n1) {
      return function(n2) {
        return n1 << n2;
      };
    }
    ;
    
    function numShr(n1) {
      return function(n2) {
        return n1 >> n2;
      };
    }
    ;
    
    function numZshr(n1) {
      return function(n2) {
        return n1 >>> n2;
      };
    }
    ;
    
    function numAnd(n1) {
      return function(n2) {
        return n1 & n2;
      };
    }
    ;
    
    function numOr(n1) {
      return function(n2) {
        return n1 | n2;
      };
    }
    ;
    
    function numXor(n1) {
      return function(n2) {
        return n1 ^ n2;
      };
    }
    ;
    
    function numComplement(n) {
      return ~n;
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    
    /**
     *  | Ring where every nonzero element has a multiplicative inverse (possibly
     *  | a non-commutative field) so that ```a `mod` b = zero```
     */
    var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
        this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
        this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
    };
    
    /**
     *  | A commutative field
     */
    var Num = function (__superclass_Prelude$dotDivisionRing_0) {
        this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var Bits = function ($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var $div = function (dict) {
        return dict["/"];
    };
    var $dot$bar$dot = function (dict) {
        return dict[".|."];
    };
    var $dot$up$dot = function (dict) {
        return dict[".^."];
    };
    var $dot$amp$dot = function (dict) {
        return dict[".&."];
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    
    /**
     *  | Addition and multiplication
     */
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = numMod;
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    
    /**
     *  | Addition and multiplication
     */
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_39) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_49) {
        if (_49 instanceof LT) {
            return "LT";
        };
        if (_49 instanceof GT) {
            return "GT";
        };
        if (_49 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_40) {
        if (_40) {
            return "true";
        };
        if (!_40) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_56) {
        return function (_57) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupArr = function (__dict_Semigroup_4) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
                };
            };
        });
    };
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    
    /**
     *  | An alias for `true`, which can be useful in guard clauses:
     *  |
     *  | E.g.
     *  |
     *  |     max x y | x >= y = x
     *  |             | otherwise = y
     */
    var otherwise = true;
    
    /**
     *  | Addition and multiplication
     */
    var one = function (dict) {
        return dict.one;
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_41) {
        return function (_42) {
            return 0;
        };
    });
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var mod = function (dict) {
        return dict.mod;
    };
    var liftM1 = function (__dict_Monad_7) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_7["__superclass_Prelude.Bind_1"]())(a)(function (_2) {
                    return $$return(__dict_Monad_7)(f(_2));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_45) {
        return function (_46) {
            return false;
        };
    }, function (_43) {
        return function (_44) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_50) {
        return function (_51) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_52) {
        return function (_53) {
            if (!_52 && !_53) {
                return EQ.value;
            };
            if (!_52 && _53) {
                return LT.value;
            };
            if (_52 && _53) {
                return EQ.value;
            };
            if (_52 && !_53) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var divisionRingNumber = new DivisionRing(function () {
        return moduloSemiringNumber;
    }, function () {
        return ringNumber;
    });
    var numNumber = new Num(function () {
        return divisionRingNumber;
    });
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_35) {
        return function (_36) {
            return _35;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _427 = compare(__dict_Ord_12)(a1)(a2);
                if (_427 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _428 = compare(__dict_Ord_13)(a1)(a2);
                if (_428 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _429 = compare(__dict_Ord_14)(a1)(a2);
                if (_429 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_15) {
        return function (a1) {
            return function (a2) {
                var _430 = compare(__dict_Ord_15)(a1)(a2);
                if (_430 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_9) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_9))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_9))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_11) {
        return new Ord(function () {
            return eqArray(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
        }, function (_54) {
            return function (_55) {
                if (_54.length === 0 && _55.length === 0) {
                    return EQ.value;
                };
                if (_54.length === 0) {
                    return LT.value;
                };
                if (_55.length === 0) {
                    return GT.value;
                };
                if (_54.length >= 1) {
                    var _437 = _54.slice(1);
                    if (_55.length >= 1) {
                        var _435 = _55.slice(1);
                        var _433 = compare(__dict_Ord_11)(_54[0])(_55[0]);
                        if (_433 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_11))(_437)(_435);
                        };
                        return _433;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_47) {
        return function (_48) {
            if (_47 instanceof LT && _48 instanceof LT) {
                return true;
            };
            if (_47 instanceof GT && _48 instanceof GT) {
                return true;
            };
            if (_47 instanceof EQ && _48 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    
    /**
     *  | This function returns its first argument, and can be used to assert type equalities.
     *  | This can be useful when types are otherwise ambiguous.
     *  |
     *  | E.g.
     *  |
     *  |     main = print $ [] `asTypeOf` [0]
     *  |
     *  | If instead, we had written `main = print []`, the type of the argument `[]` would have
     *  | been ambiguous, resulting in a compile-time error.
     */
    var asTypeOf = function (_37) {
        return function (_38) {
            return _37;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_4) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_3) {
                        return $$return(__dict_Monad_16)(_4(_3));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Bits: Bits, 
        Ord: Ord, 
        Eq: Eq, 
        Num: Num, 
        DivisionRing: DivisionRing, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        complement: complement, 
        zshr: zshr, 
        shr: shr, 
        shl: shl, 
        ".^.": $dot$up$dot, 
        ".|.": $dot$bar$dot, 
        ".&.": $dot$amp$dot, 
        ">=": $greater$eq, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "%": $percent, 
        "-": $minus, 
        mod: mod, 
        "/": $div, 
        one: one, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        liftM1: liftM1, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "#": $hash, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        asTypeOf: asTypeOf, 
        "const": $$const, 
        flip: flip, 
        otherwise: otherwise, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showUnit: showUnit, 
        showString: showString, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showArray: showArray, 
        functorArr: functorArr, 
        applyArr: applyArr, 
        applicativeArr: applicativeArr, 
        bindArr: bindArr, 
        monadArr: monadArr, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        divisionRingNumber: divisionRingNumber, 
        numNumber: numNumber, 
        eqUnit: eqUnit, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        eqBoolean: eqBoolean, 
        eqArray: eqArray, 
        eqOrdering: eqOrdering, 
        showOrdering: showOrdering, 
        ordUnit: ordUnit, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordArray: ordArray, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupUnit: semigroupUnit, 
        semigroupString: semigroupString, 
        semigroupArr: semigroupArr
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function unsafeIndex(xs) {
      return function(n) {
        return xs[n];
      };
    }
    ;
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    var acos = Math.acos;;
    var asin = Math.asin;;
    var atan = Math.atan;;
    function atan2(y){  return function (x) {    return Math.atan2(y, x);  };};
    var ceil = Math.ceil;;
    var cos = Math.cos;;
    var exp = Math.exp;;
    var floor = Math.floor;;
    var log = Math.log;;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    function pow(n){  return function(p) {    return Math.pow(n, p);  }};
    var round = Math.round;;
    var sin = Math.sin;;
    var sqrt = Math.sqrt;;
    var tan = Math.tan;;
    var e       = Math.E;;
    var ln2     = Math.LN2;;
    var ln10    = Math.LN10;;
    var log2e   = Math.LOG2E;;
    var log10e  = Math.LOG10E;;
    var pi      = Math.PI;;
    var sqrt1_2 = Math.SQRT1_2;;
    var sqrt2   = Math.SQRT2;;
    return {
        sqrt2: sqrt2, 
        sqrt1_2: sqrt1_2, 
        pi: pi, 
        log10e: log10e, 
        log2e: log2e, 
        ln10: ln10, 
        ln2: ln2, 
        e: e, 
        tan: tan, 
        sqrt: sqrt, 
        sin: sin, 
        round: round, 
        pow: pow, 
        min: min, 
        max: max, 
        log: log, 
        floor: floor, 
        exp: exp, 
        cos: cos, 
        ceil: ceil, 
        atan2: atan2, 
        atan: atan, 
        asin: asin, 
        acos: acos, 
        abs: abs
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function mkFn0(fn) {
      return function() {
        return fn({});
      };
    }
    ;
    
    function mkFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;
    
    function mkFn2(fn) {
      return function(a, b) {
        return fn(a)(b);
      };
    }
    ;
    
    function mkFn3(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c);
      };
    }
    ;
    
    function mkFn4(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
      };
    }
    ;
    
    function mkFn5(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    }
    ;
    
    function mkFn6(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
      };
    }
    ;
    
    function mkFn7(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
      };
    }
    ;
    
    function mkFn8(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
      };
    }
    ;
    
    function mkFn9(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
      };
    }
    ;
    
    function mkFn10(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
      };
    }
    ;
    
    function runFn0(fn) {
      return fn();
    }
    ;
    
    function runFn1(fn) {
      return function(a) {
        return fn(a);
      };
    }
    ;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    
    function runFn5(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn6(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn8(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn9(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    
    function runFn10(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    ;
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        runFn10: runFn10, 
        runFn9: runFn9, 
        runFn8: runFn8, 
        runFn7: runFn7, 
        runFn6: runFn6, 
        runFn5: runFn5, 
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2, 
        runFn1: runFn1, 
        runFn0: runFn0, 
        mkFn10: mkFn10, 
        mkFn9: mkFn9, 
        mkFn8: mkFn8, 
        mkFn7: mkFn7, 
        mkFn6: mkFn6, 
        mkFn5: mkFn5, 
        mkFn4: mkFn4, 
        mkFn3: mkFn3, 
        mkFn2: mkFn2, 
        mkFn1: mkFn1, 
        mkFn0: mkFn0, 
        on: on
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;
    
    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
    var Char = function (x) {
        return x;
    };
    var showChar = new Prelude.Show(function (_63) {
        return "Char " + Prelude.show(Prelude.showString)(_63);
    });
    var eqChar = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqChar)(a)(b);
        };
    }, function (_59) {
        return function (_60) {
            return _59 === _60;
        };
    });
    var ordChar = new Prelude.Ord(function () {
        return eqChar;
    }, function (_61) {
        return function (_62) {
            return Prelude.compare(Prelude.ordString)(_61)(_62);
        };
    });
    var charString = function (_58) {
        return _58;
    };
    return {
        toCharCode: toCharCode, 
        fromCharCode: fromCharCode, 
        charString: charString, 
        eqChar: eqChar, 
        ordChar: ordChar, 
        showChar: showChar
    };
})();
var PS = PS || {};
PS.Data_String_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Char = PS.Data_Char;
    
    function charCodeAt(i) {
      return function(s) {
        return s.charCodeAt(i);
      };
    }
    ;
    
    function charAt(i) {
      return function(s) {
        return s.charAt(i);
      };
    }
    ;
    return {
        charCodeAt: charCodeAt, 
        charAt: charAt
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function runPure(f) {
      return f();
    }
    ;
    
    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;
    
    function whileE(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
          return {};
        };
      };
    }
    ;
    
    function forE(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    }
    ;
    
    function foreachE(as) {
      return function(f) {
        return function() {
          for (var i = 0; i < as.length; i++) {
            f(as[i])();
          }
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        foreachE: foreachE, 
        forE: forE, 
        whileE: whileE, 
        untilE: untilE, 
        runPure: runPure, 
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Exception = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function showErrorImpl(err) {
    return err.stack || err.toString();
  }
  ;
    
  function error(msg) {
    return new Error(msg);
  }
  ;
    
  function message(e) {
    return e.message;
  }
  ;
    
  function throwException(e) {
    return function() {
      throw e;
    };
  }
  ;
    
  function catchException(c) {
    return function(t) {
      return function() {
        try {
          return t();
        } catch(e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === '[object Error]') {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  }
  ;
    var showError = new Prelude.Show(showErrorImpl);
    return {
        catchException: catchException, 
        throwException: throwException, 
        message: message, 
        error: error, 
        showErrorImpl: showErrorImpl, 
        showError: showError
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Random = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function random() {
    return Math.random();
  }
  ;
    
    /**
     *  | Returns a random number between min (inclusive) and max (exclusive).
     */
    var randomRange = function (min) {
        return function (max) {
            return function __do() {
                var _6 = random();
                return _6 * (max - min) + min;
            };
        };
    };
    
    /**
     *  | Takes a range `low` `high` and returns a random int uniformly distributed
     *  | in the closed interval `[low, high]`. It is unspecified what happens if
     *  | `low > high`.
     */
    var randomInt = function (low) {
        return function (high) {
            return function __do() {
                var _5 = random();
                return $$Math.floor(_5 * ((high - low) + 1)) + low;
            };
        };
    };
    return {
        randomRange: randomRange, 
        randomInt: randomInt, 
        random: random
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function unsafeInterleaveEff(f) {
      return f;
    }
    ;
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    
    function newSTRef(val) {
      return function() {
        return { value: val };
      };
    }
    ;
    
    function readSTRef(ref) {
      return function() {
        return ref.value;
      };
    }
    ;
    
    function modifySTRef(ref) {
      return function(f) {
        return function() {
          return ref.value = f(ref.value);
        };
      };
    }
    ;
    
    function writeSTRef(ref) {
      return function(a) {
        return function() {
          return ref.value = a;
        };
      };
    }
    ;
    
    function runST(f) {
      return f;
    }
    ;
    var pureST = function (st) {
        return Control_Monad_Eff.runPure(runST(st));
    };
    return {
        pureST: pureST, 
        runST: runST, 
        writeSTRef: writeSTRef, 
        modifySTRef: modifySTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    var print = function (__dict_Show_17) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_17)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_18) {
        return function (_69) {
            return function (_70) {
                if (_69) {
                    return _70;
                };
                if (!_69) {
                    return Prelude["return"](__dict_Monad_18)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_19) {
        return function (_71) {
            return function (_72) {
                if (!_71) {
                    return _72;
                };
                if (_71) {
                    return Prelude["return"](__dict_Monad_19)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_20) {
        return function (_64) {
            return function (_65) {
                if (_64 === 0) {
                    return Prelude["return"](__dict_Monad_20)([  ]);
                };
                return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(_65)(function (_8) {
                    return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_20)(_64 - 1)(_65))(function (_7) {
                        return Prelude["return"](__dict_Monad_20)(Prelude[":"](_8)(_7));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_21) {
        return function (_66) {
            return function (_67) {
                return function (_68) {
                    if (_68.length === 0) {
                        return Prelude["return"](__dict_Monad_21)(_67);
                    };
                    if (_68.length >= 1) {
                        var _464 = _68.slice(1);
                        return Prelude[">>="](__dict_Monad_21["__superclass_Prelude.Bind_1"]())(_66(_67)(_68[0]))(function (a$prime) {
                            return foldM(__dict_Monad_21)(_66)(a$prime)(_464);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        unless: unless, 
        when: when, 
        foldM: foldM, 
        replicateM: replicateM
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Lazy = function (defer) {
        this.defer = defer;
    };
    var Lazy1 = function (defer1) {
        this.defer1 = defer1;
    };
    var Lazy2 = function (defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_22) {
        return function (f) {
            return defer2(__dict_Lazy2_22)(function (_75) {
                return f(fix2(__dict_Lazy2_22)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_23) {
        return function (f) {
            return defer1(__dict_Lazy1_23)(function (_74) {
                return f(fix1(__dict_Lazy1_23)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_24) {
        return function (f) {
            return defer(__dict_Lazy_24)(function (_73) {
                return f(fix(__dict_Lazy_24)(f));
            });
        };
    };
    return {
        Lazy2: Lazy2, 
        Lazy1: Lazy1, 
        Lazy: Lazy, 
        fix2: fix2, 
        fix1: fix1, 
        fix: fix, 
        defer2: defer2, 
        defer1: defer1, 
        defer: defer
    };
})();
var PS = PS || {};
PS.Control_Functor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$dollar = function (__dict_Functor_25) {
        return function (x) {
            return function (f) {
                return Prelude["<$>"](__dict_Functor_25)(Prelude["const"](x))(f);
            };
        };
    };
    var $dollar$greater = function (__dict_Functor_26) {
        return function (f) {
            return function (x) {
                return Prelude["<$>"](__dict_Functor_26)(Prelude["const"](x))(f);
            };
        };
    };
    return {
        "$>": $dollar$greater, 
        "<$": $less$dollar
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Extend = function ($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_27) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_27)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_28) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_28)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_29) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_29)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_30) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_30)(w)(w$prime));
                    });
                };
            };
        }, function () {
            return Prelude.functorArr;
        });
    };
    var duplicate = function (__dict_Extend_31) {
        return function (w) {
            return $less$less$eq(__dict_Extend_31)(Prelude.id(Prelude.categoryArr))(w);
        };
    };
    return {
        Extend: Extend, 
        duplicate: duplicate, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        "<<=": $less$less$eq, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_32) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_32)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_33) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_33)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_34) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_34)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_35) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_35)(m)(Prelude.id(Prelude.categoryArr));
        };
    };
    var ifM = function (__dict_Bind_36) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_36)(cond)(function (cond$prime) {
                        if (cond$prime) {
                            return t;
                        };
                        if (!cond$prime) {
                            return f;
                        };
                        throw new Error("Failed pattern match");
                    });
                };
            };
        };
    };
    return {
        ifM: ifM, 
        join: join, 
        "<=<": $less$eq$less, 
        ">=>": $greater$eq$greater, 
        "=<<": $eq$less$less
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_37) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_37)(Prelude["<$>"](__dict_Apply_37["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_38) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_38)(Prelude["<$>"](__dict_Apply_38["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_39) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<$>"](__dict_Apply_39["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_40) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_40)(Prelude["<*>"](__dict_Apply_40)(Prelude["<*>"](__dict_Apply_40)(Prelude["<$>"](__dict_Apply_40["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_41) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_41)(Prelude["<*>"](__dict_Apply_41)(Prelude["<$>"](__dict_Apply_41["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_42) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_42)(Prelude["<$>"](__dict_Apply_42["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    var forever = function (__dict_Apply_43) {
        return function (a) {
            return $times$greater(__dict_Apply_43)(a)(forever(__dict_Apply_43)(a));
        };
    };
    return {
        forever: forever, 
        lift5: lift5, 
        lift4: lift4, 
        lift3: lift3, 
        lift2: lift2, 
        "*>": $times$greater, 
        "<*": $less$times
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | The `Alt` type class identifies an associative operation on a type
     *  | constructor.  It is similar to `Semigroup`, except that it applies to
     *  | types of kind `* -> *`, like `Array` or `List`, rather than concrete types
     *  | `String` or `Number`.
     *  |
     *  | `Alt` instances are required to satisfy the following laws:
     *  |
     *  | - Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`
     *  | - Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`
     *  |
     *  | For example, the `Array` (`[]`) type is an instance of `Alt`, where
     *  | `(<|>)` is defined to be concatenation.
     */
    var Alt = function ($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    
    /**
     *  | The `Alt` type class identifies an associative operation on a type
     *  | constructor.  It is similar to `Semigroup`, except that it applies to
     *  | types of kind `* -> *`, like `Array` or `List`, rather than concrete types
     *  | `String` or `Number`.
     *  |
     *  | `Alt` instances are required to satisfy the following laws:
     *  |
     *  | - Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`
     *  | - Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`
     *  |
     *  | For example, the `Array` (`[]`) type is an instance of `Alt`, where
     *  | `(<|>)` is defined to be concatenation.
     */
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        Alt: Alt, 
        "<|>": $less$bar$greater
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    
    /**
     *  | The `Plus` type class extends the `Alt` type class with a value that
     *  | should be the left and right identity for `(<|>)`.
     *  | It is similar to `Monoid`, except that it applies to types of
     *  | kind `* -> *`, like `Array` or `List`, rather than concrete types like
     *  | `String` or `Number`.
     *  |
     *  | `Plus` instances should satisfy the following laws:
     *  |
     *  | - Left identity: `empty <|> x == x`
     *  | - Right identity: `x <|> empty == x`
     *  | - Annihilation: `f <$> empty == empty`
     */
    var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    
    /**
     *  | The `Plus` type class extends the `Alt` type class with a value that
     *  | should be the left and right identity for `(<|>)`.
     *  | It is similar to `Monoid`, except that it applies to types of
     *  | kind `* -> *`, like `Array` or `List`, rather than concrete types like
     *  | `String` or `Number`.
     *  |
     *  | `Plus` instances should satisfy the following laws:
     *  |
     *  | - Left identity: `empty <|> x == x`
     *  | - Right identity: `x <|> empty == x`
     *  | - Annihilation: `f <$> empty == empty`
     */
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    
    /**
     *  | The `Alternative` type class has no members of its own; it just specifies
     *  | that the type constructor has both `Applicative` and `Plus` instances.
     *  |
     *  | Types which have `Alternative` instances should also satisfy the following
     *  | laws:
     *  |
     *  | - Distributivity: `(f <|> g) <*> x == (f <*> x) <|> (g <*> x)`
     *  | - Annihilation: `empty <*> f = empty`
     */
    var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_44) {
        return function (__dict_Lazy1_45) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_44["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_44["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_45)(function (_76) {
                    return many(__dict_Alternative_44)(__dict_Lazy1_45)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_46) {
        return function (__dict_Lazy1_47) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_46["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_46)(__dict_Lazy1_47)(v))(Prelude.pure(__dict_Alternative_46["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    
    /**
     *  | The `MonadPlus` type class has no members of its own; it just specifies
     *  | that the type has both `Monad` and `Alternative` instances.
     *  |
     *  | Types which have `MonadPlus` instances should also satisfy the following
     *  | laws:
     *  |
     *  | - Distributivity: `(x <|> y) >>= f == (x >>= f) <|> (y >>= f)`
     *  | - Annihilation: `empty >>= f = empty`
     */
    var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_48) {
        return function (_77) {
            if (_77) {
                return Prelude["return"](__dict_MonadPlus_48["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_77) {
                return Control_Plus.empty((__dict_MonadPlus_48["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    
    /**
     *  | The `Show` instance allows `Either` values to be rendered as a string with
     *  | `show` whenever there is an `Show` instance for both type the `Either` can
     *  | contain.
     */
    var showEither = function (__dict_Show_49) {
        return function (__dict_Show_50) {
            return new Prelude.Show(function (_90) {
                if (_90 instanceof Left) {
                    return "Left (" + (Prelude.show(__dict_Show_49)(_90.value0) + ")");
                };
                if (_90 instanceof Right) {
                    return "Right (" + (Prelude.show(__dict_Show_50)(_90.value0) + ")");
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Right` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Left y == Left y
     *  | ```
     */
    var functorEither = new Prelude.Functor(function (_82) {
        return function (_83) {
            if (_83 instanceof Left) {
                return new Left(_83.value0);
            };
            if (_83 instanceof Right) {
                return new Right(_82(_83.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    
    /**
     *  | The `Extend` instance allows sequencing of `Either` values and functions
     *  | that accept an `Either` and return a non-`Either` result using the
     *  | `<<=` operator.
     *  |
     *  | ``` purescript
     *  | f <<= Left x = Left x
     *  | f <<= Right x = Right (f x)
     *  | ```
     */
    var extendEither = new Control_Extend.Extend(function (_88) {
        return function (_89) {
            if (_89 instanceof Left) {
                return new Left(_89.value0);
            };
            return new Right(_88(_89));
        };
    }, function () {
        return functorEither;
    });
    
    /**
     *  | The `Eq` instance allows `Either` values to be checked for equality with
     *  | `==` and inequality with `/=` whenever there is an `Eq` instance for both
     *  | types the `Either` can contain.
     */
    var eqEither = function (__dict_Eq_53) {
        return function (__dict_Eq_54) {
            return new Prelude.Eq(function (a) {
                return function (b) {
                    return !Prelude["=="](eqEither(__dict_Eq_53)(__dict_Eq_54))(a)(b);
                };
            }, function (_91) {
                return function (_92) {
                    if (_91 instanceof Left && _92 instanceof Left) {
                        return Prelude["=="](__dict_Eq_53)(_91.value0)(_92.value0);
                    };
                    if (_91 instanceof Right && _92 instanceof Right) {
                        return Prelude["=="](__dict_Eq_54)(_91.value0)(_92.value0);
                    };
                    return false;
                };
            });
        };
    };
    
    /**
     *  | The `Ord` instance allows `Either` values to be compared with
     *  | `compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for
     *  | both types the `Either` can contain.
     *  |
     *  | Any `Left` value is considered to be less than a `Right` value.
     */
    var ordEither = function (__dict_Ord_51) {
        return function (__dict_Ord_52) {
            return new Prelude.Ord(function () {
                return eqEither(__dict_Ord_51["__superclass_Prelude.Eq_0"]())(__dict_Ord_52["__superclass_Prelude.Eq_0"]());
            }, function (_93) {
                return function (_94) {
                    if (_93 instanceof Left && _94 instanceof Left) {
                        return Prelude.compare(__dict_Ord_51)(_93.value0)(_94.value0);
                    };
                    if (_93 instanceof Right && _94 instanceof Right) {
                        return Prelude.compare(__dict_Ord_52)(_93.value0)(_94.value0);
                    };
                    if (_93 instanceof Left) {
                        return Prelude.LT.value;
                    };
                    if (_94 instanceof Left) {
                        return Prelude.GT.value;
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    
    /**
     *  | Takes two functions and an `Either` value, if the value is a `Left` the
     *  | inner value is applied to the first function, if the value is a `Right`
     *  | the inner value is applied to the second function.
     *  |
     *  | ``` purescript
     *  | either f g (Left x) == f x
     *  | either f g (Right y) == g y
     *  | ```
     */
    var either = function (_79) {
        return function (_80) {
            return function (_81) {
                if (_81 instanceof Left) {
                    return _79(_81.value0);
                };
                if (_81 instanceof Right) {
                    return _80(_81.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    
    /**
     *  | Returns `true` when the `Either` value was constructed with `Left`.
     */
    var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
    
    /**
     *  | Returns `true` when the `Either` value was constructed with `Right`.
     */
    var isRight = either(Prelude["const"](false))(Prelude["const"](true));
    
    /**
     *  | The `Apply` instance allows functions contained within a `Right` to
     *  | transform a value contained within a `Right` using the `(<*>)` operator:
     *  |
     *  | ``` purescript
     *  | Right f <*> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are left untouched:
     *  |
     *  | ``` purescript
     *  | Left f <*> Right x == Left x
     *  | Right f <*> Left y == Left y
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
     *  | pure function to take `Either`-typed arguments so `f :: a -> b -> c`
     *  | becomes `f :: Either l a -> Either l b -> Either l c`:
     *  |
     *  | ``` purescript
     *  | f <$> Right x <*> Right y == Right (f x y)
     *  | ```
     *  |
     *  | The `Left`-preserving behaviour of both operators means the result of
     *  | an expression like the above but where any one of the values is `Left`
     *  | means the whole result becomes `Left` also, taking the first `Left` value
     *  | found:
     *  |
     *  | ``` purescript
     *  | f <$> Left x <*> Right y == Left x
     *  | f <$> Right x <*> Left y == Left y
     *  | f <$> Left x <*> Left y == Left x
     *  | ```
     */
    var applyEither = new Prelude.Apply(function (_84) {
        return function (_85) {
            if (_84 instanceof Left) {
                return new Left(_84.value0);
            };
            if (_84 instanceof Right) {
                return Prelude["<$>"](functorEither)(_84.value0)(_85);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    
    /**
     *  | The `Bind` instance allows sequencing of `Either` values and functions that
     *  | return an `Either` by using the `>>=` operator:
     *  |
     *  | ``` purescript
     *  | Left x >>= f = Left x
     *  | Right x >>= f = f x
     *  | ```
     */
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_78) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    
    /**
     *  | The `Applicative` instance enables lifting of values into `Either` with the
     *  | `pure` or `return` function (`return` is an alias for `pure`):
     *  |
     *  | ``` purescript
     *  | pure x :: Either _ _ == Right x
     *  | return x :: Either _ _ == Right x
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
     *  | `pure` can be used to pass a mixture of `Either` and non-`Either` typed
     *  | values to a function that does not usually expect them, by using `pure`
     *  | for any value that is not already `Either` typed:
     *  |
     *  | ``` purescript
     *  | f <$> Right x <*> pure y == Right (f x y)
     *  | ```
     *  |
     *  | Even though `pure = Right` it is recommended to use `pure` in situations
     *  | like this as it allows the choice of `Applicative` to be changed later
     *  | without having to go through and replace `Right` with a new constructor.
     */
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    
    /**
     *  | The `Monad` instance guarantees that there are both `Applicative` and
     *  | `Bind` instances for `Either`. This also enables the `do` syntactic sugar:
     *  |
     *  | ``` purescript
     *  | do
     *  |   x' <- x
     *  |   y' <- y
     *  |   pure (f x' y')
     *  | ```
     *  |
     *  | Which is equivalent to:
     *  |
     *  | ``` purescript
     *  | x >>= (\x' -> y >>= (\y' -> pure (f x' y')))
     *  | ```
     */
    var monadEither = new Prelude.Monad(function () {
        return applicativeEither;
    }, function () {
        return bindEither;
    });
    
    /**
     *  | The `Alt` instance allows for a choice to be made between two `Either`
     *  | values with the `<|>` operator, where the first `Right` encountered
     *  | is taken.
     *  |
     *  | ``` purescript
     *  | Right x <|> Right y == Right x
     *  | Left x <|> Right y == Right y
     *  | Left x <|> Left y == Left y
     *  | ```
     */
    var altEither = new Control_Alt.Alt(function (_86) {
        return function (_87) {
            if (_86 instanceof Left) {
                return _87;
            };
            return _86;
        };
    }, function () {
        return functorEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        isRight: isRight, 
        isLeft: isLeft, 
        either: either, 
        functorEither: functorEither, 
        applyEither: applyEither, 
        applicativeEither: applicativeEither, 
        altEither: altEither, 
        bindEither: bindEither, 
        monadEither: monadEither, 
        extendEither: extendEither, 
        showEither: showEither, 
        eqEither: eqEither, 
        ordEither: ordEither
    };
})();
var PS = PS || {};
PS.Data_Either_Nested = (function () {
    "use strict";
    var Data_Either = PS.Data_Either;
    var Prelude = PS.Prelude;
    var choice2 = Data_Either.either;
    var choice3 = function (a) {
        return function (b) {
            return function (c) {
                return Data_Either.either(a)(choice2(b)(c));
            };
        };
    };
    var choice4 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return Data_Either.either(a)(choice3(b)(c)(d));
                };
            };
        };
    };
    var choice5 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return Data_Either.either(a)(choice4(b)(c)(d)(e));
                    };
                };
            };
        };
    };
    var choice6 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return Data_Either.either(a)(choice5(b)(c)(d)(e)(f));
                        };
                    };
                };
            };
        };
    };
    var choice7 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return Data_Either.either(a)(choice6(b)(c)(d)(e)(f)(g));
                            };
                        };
                    };
                };
            };
        };
    };
    var choice8 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return Data_Either.either(a)(choice7(b)(c)(d)(e)(f)(g)(h));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice9 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return Data_Either.either(a)(choice8(b)(c)(d)(e)(f)(g)(h)(i));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice10 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (j) {
                                            return Data_Either.either(a)(choice9(b)(c)(d)(e)(f)(g)(h)(i)(j));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        choice10: choice10, 
        choice9: choice9, 
        choice8: choice8, 
        choice7: choice7, 
        choice6: choice6, 
        choice5: choice5, 
        choice4: choice4, 
        choice3: choice3, 
        choice2: choice2
    };
})();
var PS = PS || {};
PS.Data_Either_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    
    /**
     *  | A partial function that extracts the value from the `Right` data constructor.
     *  | Passing a `Left` to `fromRight` will throw an error at runtime.
     */
    var fromRight = function (_96) {
        if (_96 instanceof Data_Either.Right) {
            return _96.value0;
        };
        throw new Error("Failed pattern match");
    };
    
    /**
     *  | A partial function that extracts the value from the `Left` data constructor.
     *  | Passing a `Right` to `fromLeft` will throw an error at runtime.
     */
    var fromLeft = function (_95) {
        if (_95 instanceof Data_Either.Left) {
            return _95.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromRight: fromRight, 
        fromLeft: fromLeft
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    
    /**
     *  | The `Show` instance allows `Maybe` values to be rendered as a string with
     *  | `show` whenever there is an `Show` instance for the type the `Maybe`
     *  | contains.
     */
    var showMaybe = function (__dict_Show_55) {
        return new Prelude.Show(function (_112) {
            if (_112 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_55)(_112.value0) + ")");
            };
            if (_112 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    
    /**
     *  | The `Semigroup` instance enables use of the operator `<>` on `Maybe` values
     *  | whenever there is a `Semigroup` instance for the type the `Maybe` contains.
     *  | The exact behaviour of `<>` depends on the "inner" `Semigroup` instance,
     *  | but generally captures the notion of appending or combining things.
     *  |
     *  | ``` purescript
     *  | Just x <> Just y = Just (x <> y)
     *  | Just x <> Nothing = Just x
     *  | Nothing <> Just y = Just y
     *  | Nothing <> Nothing = Nothing
     *  | ```
     */
    var semigroupMaybe = function (__dict_Semigroup_56) {
        return new Prelude.Semigroup(function (_110) {
            return function (_111) {
                if (_110 instanceof Nothing) {
                    return _111;
                };
                if (_111 instanceof Nothing) {
                    return _110;
                };
                if (_110 instanceof Just && _111 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_56)(_110.value0)(_111.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    
    /**
     *  | Takes a default value, a function, and a `Maybe` value. If the `Maybe`
     *  | value is `Nothing` the default value is returned, otherwise the function
     *  | is applied to the value inside the `Just` and the result is returned.
     *  |
     *  | ``` purescript
     *  | maybe x f Nothing == x
     *  | maybe x f (Just y) == f y
     *  | ```
     */
    var maybe = function (_97) {
        return function (_98) {
            return function (_99) {
                if (_99 instanceof Nothing) {
                    return _97;
                };
                if (_99 instanceof Just) {
                    return _98(_99.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    
    /**
     *  | Returns `true` when the `Maybe` value is `Nothing`.
     */
    var isNothing = maybe(true)(Prelude["const"](false));
    
    /**
     *  | Returns `true` when the `Maybe` value was constructed with `Just`.
     */
    var isJust = maybe(false)(Prelude["const"](true));
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Just` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Just x == Just (f x)
     *  | ```
     *  |
     *  | `Nothing` values are left untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Nothing == Nothing
     *  | ```
     */
    var functorMaybe = new Prelude.Functor(function (_100) {
        return function (_101) {
            if (_101 instanceof Just) {
                return new Just(_100(_101.value0));
            };
            return Nothing.value;
        };
    });
    
    /**
     *  | Takes a default value, and a `Maybe` value. If the `Maybe` value is
     *  | `Nothing` the default value is returned, otherwise the value inside the
     *  | `Just` is returned.
     *  |
     *  | ``` purescript
     *  | fromMaybe x Nothing == x
     *  | fromMaybe x (Just y) == y
     *  | ```
     */
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    
    /**
     *  | The `Extend` instance allows sequencing of `Maybe` values and functions
     *  | that accept a `Maybe a` and return a non-`Maybe` result using the
     *  | `<<=` operator.
     *  |
     *  | ``` purescript
     *  | f <<= Nothing = Nothing
     *  | f <<= Just x = Just (f x)
     *  | ```
     */
    var extendMaybe = new Control_Extend.Extend(function (_108) {
        return function (_109) {
            if (_109 instanceof Nothing) {
                return Nothing.value;
            };
            return new Just(_108(_109));
        };
    }, function () {
        return functorMaybe;
    });
    
    /**
     *  | The `Eq` instance allows `Maybe` values to be checked for equality with
     *  | `==` and inequality with `/=` whenever there is an `Eq` instance for the
     *  | type the `Maybe` contains.
     */
    var eqMaybe = function (__dict_Eq_58) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_58))(a)(b);
            };
        }, function (_113) {
            return function (_114) {
                if (_113 instanceof Nothing && _114 instanceof Nothing) {
                    return true;
                };
                if (_113 instanceof Just && _114 instanceof Just) {
                    return Prelude["=="](__dict_Eq_58)(_113.value0)(_114.value0);
                };
                return false;
            };
        });
    };
    
    /**
     *  | The `Ord` instance allows `Maybe` values to be compared with
     *  | `compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for
     *  | the type the `Maybe` contains.
     *  |
     *  | `Nothing` is considered to be less than any `Just` value.
     */
    var ordMaybe = function (__dict_Ord_57) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_57["__superclass_Prelude.Eq_0"]());
        }, function (_115) {
            return function (_116) {
                if (_115 instanceof Just && _116 instanceof Just) {
                    return Prelude.compare(__dict_Ord_57)(_115.value0)(_116.value0);
                };
                if (_115 instanceof Nothing && _116 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_115 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_116 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    
    /**
     *  | The `Apply` instance allows functions contained within a `Just` to
     *  | transform a value contained within a `Just` using the `(<*>)` operator:
     *  |
     *  | ``` purescript
     *  | Just f <*> Just x == Just (f x)
     *  | ```
     *  |
     *  | `Nothing` values are left untouched:
     *  |
     *  | ``` purescript
     *  | Just f <*> Nothing == Nothing
     *  | Nothing <*> Just x == Nothing
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
     *  | pure function to take `Maybe`-typed arguments so `f :: a -> b -> c`
     *  | becomes `f :: Maybe a -> Maybe b -> Maybe c`:
     *  |
     *  | ``` purescript
     *  | f <$> Just x <*> Just y == Just (f x y)
     *  | ```
     *  |
     *  | The `Nothing`-preserving behaviour of both operators means the result of
     *  | an expression like the above but where any one of the values is `Nothing`
     *  | means the whole result becomes `Nothing` also:
     *  |
     *  | ``` purescript
     *  | f <$> Nothing <*> Just y == Nothing
     *  | f <$> Just x <*> Nothing == Nothing
     *  | f <$> Nothing <*> Nothing == Nothing
     *  | ```
     */
    var applyMaybe = new Prelude.Apply(function (_102) {
        return function (_103) {
            if (_102 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_102.value0)(_103);
            };
            if (_102 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    
    /**
     *  | The `Bind` instance allows sequencing of `Maybe` values and functions that
     *  | return a `Maybe` by using the `>>=` operator:
     *  |
     *  | ``` purescript
     *  | Just x >>= f = f x
     *  | Nothing >>= f = Nothing
     *  | ```
     */
    var bindMaybe = new Prelude.Bind(function (_106) {
        return function (_107) {
            if (_106 instanceof Just) {
                return _107(_106.value0);
            };
            if (_106 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    
    /**
     *  | The `Applicative` instance enables lifting of values into `Maybe` with the
     *  | `pure` or `return` function (`return` is an alias for `pure`):
     *  |
     *  | ``` purescript
     *  | pure x :: Maybe _ == Just x
     *  | return x :: Maybe _ == Just x
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
     *  | `pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed
     *  | values to a function that does not usually expect them, by using `pure`
     *  | for any value that is not already `Maybe` typed:
     *  |
     *  | ``` purescript
     *  | f <$> Just x <*> pure y == Just (f x y)
     *  | ```
     *  |
     *  | Even though `pure = Just` it is recommended to use `pure` in situations
     *  | like this as it allows the choice of `Applicative` to be changed later
     *  | without having to go through and replace `Just` with a new constructor.
     */
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    
    /**
     *  | The `Monad` instance guarantees that there are both `Applicative` and
     *  | `Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:
     *  |
     *  | ``` purescript
     *  | do
     *  |   x' <- x
     *  |   y' <- y
     *  |   pure (f x' y')
     *  | ```
     *  |
     *  | Which is equivalent to:
     *  |
     *  | ``` purescript
     *  | x >>= (\x' -> y >>= (\y' -> pure (f x' y')))
     *  | ```
     */
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    
    /**
     *  | The `Alt` instance allows for a choice to be made between two `Maybe`
     *  | values with the `<|>` operator, where the first `Just` encountered
     *  | is taken.
     *  |
     *  | ``` purescript
     *  | Just x <|> Just y == Just x
     *  | Nothing <|> Just y == Just y
     *  | Nothing <|> Nothing == Nothing
     *  | ```
     */
    var altMaybe = new Control_Alt.Alt(function (_104) {
        return function (_105) {
            if (_104 instanceof Nothing) {
                return _105;
            };
            return _104;
        };
    }, function () {
        return functorMaybe;
    });
    
    /**
     *  | The `Plus` instance provides a default `Maybe` value:
     *  |
     *  | ``` purescript
     *  | empty :: Maybe _ == Nothing
     *  | ```
     */
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    
    /**
     *  | The `Alternative` instance guarantees that there are both `Applicative` and
     *  | `Plus` instances for `Maybe`.
     */
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    
    /**
     *  | The `MonadPlus` instance guarantees that there are both `Monad` and
     *  | `Alternative` instances for `Maybe`.
     */
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        isNothing: isNothing, 
        isJust: isJust, 
        fromMaybe: fromMaybe, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        applicativeMaybe: applicativeMaybe, 
        altMaybe: altMaybe, 
        plusMaybe: plusMaybe, 
        alternativeMaybe: alternativeMaybe, 
        bindMaybe: bindMaybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        extendMaybe: extendMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe, 
        eqMaybe: eqMaybe, 
        ordMaybe: ordMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function reverse (l) {  return l.slice().reverse();};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
    function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    
    /**
     *  | An infix synonym for `range`.
     */
    var $dot$dot = range;
    
    /**
     *  | This operator provides a safe way to read a value at a particular index from an array.
     *  |
     *  | This function returns `Nothing` if the index is out-of-bounds.
     *  |
     *  | `Data.Array.Unsafe` provides the `unsafeIndex` function, which is an unsafe version of
     *  | this function without bounds checking.
     */
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            var _543 = n < 0 || (n >= length(xs) || isInt(n));
            if (_543) {
                return Data_Maybe.Nothing.value;
            };
            if (!_543) {
                return new Data_Maybe.Just(xs[n]);
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  | Keep only a number of elements from the start of an array, creating a new array.
     */
    var take = function (n) {
        return slice(0)(n);
    };
    
    /**
     *  | Get all but the first element of an array, creating a new array, or `Nothing` if the array is empty
     *  |
     *  | Running time: `O(n)` where `n` is the length of the array
     */
    var tail = function (_117) {
        if (_117.length >= 1) {
            var _546 = _117.slice(1);
            return new Data_Maybe.Just(_546);
        };
        return Data_Maybe.Nothing.value;
    };
    
    /**
     *  | Split an array into two parts:
     *  |
     *  | 1. the longest initial subarray for which all element satisfy the specified predicate
     *  | 2. the remaining elements
     *  |
     *  | For example,
     *  |
     *  | ```purescript
     *  | span (\n -> n % 2 == 1) [1,3,2,4,5] == { init: [1,3], rest: [2,4,5] }
     *  | ```
     */
    var span = (function () {
        var go = function (__copy__133) {
            return function (__copy__134) {
                return function (__copy__135) {
                    var _133 = __copy__133;
                    var _134 = __copy__134;
                    var _135 = __copy__135;
                    tco: while (true) {
                        if (_135.length >= 1) {
                            var _551 = _135.slice(1);
                            if (_134(_135[0])) {
                                var __tco__133 = Prelude[":"](_135[0])(_133);
                                var __tco__134 = _134;
                                _133 = __tco__133;
                                _134 = __tco__134;
                                _135 = _551;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(_133), 
                            rest: _135
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    
    /**
     *  | Calculate the longest initial subarray for which all element satisfy the specified predicate,
     *  | creating a new array.
     */
    var takeWhile = function (p) {
        return function (xs) {
            return (span(p)(xs)).init;
        };
    };
    
    /**
     *  | Sort the elements of an array in increasing order, where elements are compared using
     *  | the specified partial ordering, creating a new array.
     */
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _552 = comp(x)(y);
                    if (_552 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_552 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_552 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    
    /**
     *  | Sort the elements of an array in increasing order, creating a new array.
     */
    var sort = function (__dict_Ord_59) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_59))(xs);
        };
    };
    
    /**
     *  | Create an array of one element
     */
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    
    /**
     *  | Test whether an array is empty.
     */
    var $$null = function (_119) {
        if (_119.length === 0) {
            return true;
        };
        return false;
    };
    
    /**
     *  | Remove the duplicates from an array, where element equality is determined by the
     *  | specified equivalence relation, creating a new array.
     */
    var nubBy = function (_126) {
        return function (_127) {
            if (_127.length === 0) {
                return [  ];
            };
            if (_127.length >= 1) {
                var _557 = _127.slice(1);
                return Prelude[":"](_127[0])(nubBy(_126)(filter(function (y) {
                    return !_126(_127[0])(y);
                })(_557)));
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  | Remove the duplicates from an array, creating a new array.
     */
    var nub = function (__dict_Eq_60) {
        return nubBy(Prelude["=="](__dict_Eq_60));
    };
    
    /**
     *  | Apply a function to the element at the specified index, creating a new array.
     */
    var modifyAt = function (i) {
        return function (f) {
            return function (xs) {
                var _558 = $bang$bang(xs)(i);
                if (_558 instanceof Data_Maybe.Just) {
                    return updateAt(i)(f(_558.value0))(xs);
                };
                if (_558 instanceof Data_Maybe.Nothing) {
                    return xs;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    
    /**
     *  | Apply a function to each element in an array, keeping only the results which
     *  | contain a value, creating a new array.
     */
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    
    /**
     *  | Get the last element in an array, or `Nothing` if the array is empty
     *  |
     *  | Running time: `O(1)`.
     */
    var last = function (xs) {
        return $bang$bang(xs)(length(xs) - 1);
    };
    
    /**
     *  | Calculate the intersection of two arrays, using the specified equivalence relation
     *  | to compare elements, creating a new array.
     */
    var intersectBy = function (_123) {
        return function (_124) {
            return function (_125) {
                if (_124.length === 0) {
                    return [  ];
                };
                if (_125.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(_123(x))(_125) >= 0;
                };
                return filter(el)(_124);
            };
        };
    };
    
    /**
     *  | Calculate the intersection of two arrays, creating a new array.
     */
    var intersect = function (__dict_Eq_61) {
        return intersectBy(Prelude["=="](__dict_Eq_61));
    };
    
    /**
     *  | Get all but the last element of an array, creating a new array, or `Nothing` if the array is empty.
     *  |
     *  | Running time: `O(n)` where `n` is the length of the array
     */
    var init = function (_118) {
        if (_118.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(slice(0)(length(_118) - 1)(_118));
    };
    
    /**
     *  | Get the first element in an array, or `Nothing` if the array is empty
     *  |
     *  | Running time: `O(1)`.
     */
    var head = function (xs) {
        return $bang$bang(xs)(0);
    };
    
    /**
     *  | Group equal, consecutive elements of an array into arrays, using the specified
     *  | equivalence relation to detemine equality.
     */
    var groupBy = (function () {
        var go = function (__copy__130) {
            return function (__copy__131) {
                return function (__copy__132) {
                    var _130 = __copy__130;
                    var _131 = __copy__131;
                    var _132 = __copy__132;
                    tco: while (true) {
                        if (_132.length === 0) {
                            return reverse(_130);
                        };
                        if (_132.length >= 1) {
                            var _568 = _132.slice(1);
                            var sp = span(_131(_132[0]))(_568);
                            var __tco__130 = Prelude[":"](Prelude[":"](_132[0])(sp.init))(_130);
                            var __tco__131 = _131;
                            _130 = __tco__130;
                            _131 = __tco__131;
                            _132 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    
    /**
     *  | Group equal, consecutive elements of an array into arrays.
     *  |
     *  | For example,
     *  |
     *  | ```purescript
     *  | group [1,1,2,2,1] == [[1,1],[2,2],[1]]
     *  | ```
     */
    var group = function (__dict_Eq_62) {
        return function (xs) {
            return groupBy(Prelude["=="](__dict_Eq_62))(xs);
        };
    };
    
    /**
     *  | Sort and group the elements of an array into arrays.
     *  |
     *  | For example,
     *  |
     *  | ```purescript
     *  | group [1,1,2,2,1] == [[1,1,1],[2,2]]
     *  | ```
     */
    var group$prime = function (__dict_Ord_63) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_63["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_63));
    };
    var functorArray = new Prelude.Functor(map);
    
    /**
     *  | Find the index of the last element equal to the specified element,
     *  | or `-1` if no such element exists
     */
    var elemLastIndex = function (__dict_Eq_64) {
        return function (x) {
            return findLastIndex(Prelude["=="](__dict_Eq_64)(x));
        };
    };
    
    /**
     *  | Find the index of the first element equal to the specified element,
     *  | or `-1` if no such element exists
     */
    var elemIndex = function (__dict_Eq_65) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_65)(x));
        };
    };
    
    /**
     *  | Remove the longest initial subarray for which all element satisfy the specified predicate,
     *  | creating a new array.
     */
    var dropWhile = function (p) {
        return function (xs) {
            return (span(p)(xs)).rest;
        };
    };
    
    /**
     *  | Delete the first element of an array which matches the specified value, under the
     *  | equivalence relation provided in the first argument, creating a new array.
     */
    var deleteBy = function (_120) {
        return function (_121) {
            return function (_122) {
                if (_122.length === 0) {
                    return [  ];
                };
                var _572 = findIndex(_120(_121))(_122);
                if (_572 < 0) {
                    return _122;
                };
                return deleteAt(_572)(1)(_122);
            };
        };
    };
    
    /**
     *  | Delete the first element of an array which is equal to the specified value,
     *  | creating a new array.
     */
    var $$delete = function (__dict_Eq_66) {
        return deleteBy(Prelude["=="](__dict_Eq_66));
    };
    
    /**
     *  | Delete the first occurrence of each element in the second array from the first array,
     *  | creating a new array.
     */
    var $bslash$bslash = function (__dict_Eq_67) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__128) {
                    return function (__copy__129) {
                        var _128 = __copy__128;
                        var _129 = __copy__129;
                        tco: while (true) {
                            if (_129.length === 0) {
                                return _128;
                            };
                            if (_128.length === 0) {
                                return [  ];
                            };
                            if (_129.length >= 1) {
                                var _576 = _129.slice(1);
                                var __tco__128 = $$delete(__dict_Eq_67)(_129[0])(_128);
                                _128 = __tco__128;
                                _129 = _576;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    
    /**
     *  | Filter an array of optional values, keeping only the elements which contain
     *  | a value, creating a new array.
     */
    var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    var altArray = new Control_Alt.Alt(append, function () {
        return functorArray;
    });
    var plusArray = new Control_Plus.Plus(function () {
        return altArray;
    }, [  ]);
    var alternativeArray = new Control_Alternative.Alternative(function () {
        return plusArray;
    }, function () {
        return applicativeArray;
    });
    var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
        return alternativeArray;
    }, function () {
        return monadArray;
    });
    return {
        takeWhile: takeWhile, 
        dropWhile: dropWhile, 
        span: span, 
        groupBy: groupBy, 
        "group'": group$prime, 
        group: group, 
        sortBy: sortBy, 
        sort: sort, 
        nubBy: nubBy, 
        nub: nub, 
        zipWith: zipWith, 
        range: range, 
        filter: filter, 
        concatMap: concatMap, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        "\\\\": $bslash$bslash, 
        "delete": $$delete, 
        deleteBy: deleteBy, 
        modifyAt: modifyAt, 
        updateAt: updateAt, 
        deleteAt: deleteAt, 
        insertAt: insertAt, 
        take: take, 
        drop: drop, 
        reverse: reverse, 
        concat: concat, 
        append: append, 
        elemLastIndex: elemLastIndex, 
        elemIndex: elemIndex, 
        findLastIndex: findLastIndex, 
        findIndex: findIndex, 
        length: length, 
        catMaybes: catMaybes, 
        mapMaybe: mapMaybe, 
        map: map, 
        "null": $$null, 
        init: init, 
        tail: tail, 
        last: last, 
        head: head, 
        singleton: singleton, 
        snoc: snoc, 
        "..": $dot$dot, 
        "!!": $bang$bang, 
        functorArray: functorArray, 
        applyArray: applyArray, 
        applicativeArray: applicativeArray, 
        bindArray: bindArray, 
        monadArray: monadArray, 
        semigroupArray: semigroupArray, 
        altArray: altArray, 
        plusArray: plusArray, 
        alternativeArray: alternativeArray, 
        monadPlusArray: monadPlusArray
    };
})();
var PS = PS || {};
PS.Data_Array_ST = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    
  function runSTArray(f) {
    return f;
  };
    
  function emptySTArray() {
    return [];
  };
    
  function peekSTArrayImpl(arr, i, s, f) {
    return function() {
      var index = ~~i;
      if (0 <= index && index < arr.length) {
        return s(arr[index]);
      } else {
        return f;
      }
    };
  };
    
  function pokeSTArrayImpl(arr, i, a) {
    return function() {
      var index = ~~i;
      if (0 <= index && index <= arr.length) {
        arr[index] = a;
        return true;
      }
      return false;
    };
  };
    
  function pushAllSTArrayImpl(arr, as) {
    return function(){
      return arr.push.apply(arr, as);
    };
  };
    
  function spliceSTArrayImpl(arr, index, howMany, bs) {
    return function(){
      return arr.splice.apply(arr, [index, howMany].concat(bs));
    };
  };
    
  function copyImpl(arr) {
    return function(){
      var as = [];
      var i = -1;
      var n = arr.length;
      while(++i < n) {
        as[i] = arr[i];
      }
      return as;
    };
  };
    
  function toAssocArray(arr) {
    return function(){
      var as = [];
      var i = -1;
      var n = arr.length;
      while(++i < n) {
        as[i] = {value: arr[i], index: i};
      }
      return as;
    };
  };
    
    /**
     *  | Create a mutable copy of an immutable array.
     */
    var thaw = copyImpl;
    
    /**
     *  | Remove and/or insert elements from/into a mutable array at the specified index.
     */
    var spliceSTArray = Data_Function.runFn4(spliceSTArrayImpl);
    
    /**
     *  | Append the values in an immutable array to the end of a mutable array.
     */
    var pushAllSTArray = Data_Function.runFn2(pushAllSTArrayImpl);
    
    /**
     *  | Append an element to the end of a mutable array.
     */
    var pushSTArray = function (arr) {
        return function (a) {
            return pushAllSTArray(arr)([ a ]);
        };
    };
    
    /**
     *  | Change the value at the specified index in a mutable array.
     */
    var pokeSTArray = function (arr) {
        return function (i) {
            return function (a) {
                return pokeSTArrayImpl(arr, i, a);
            };
        };
    };
    
    /**
     *  | Read the value at the specified index in a mutable array.
     */
    var peekSTArray = function (arr) {
        return function (i) {
            return peekSTArrayImpl(arr, i, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    
    /**
     *  | Create an immutable copy of a mutable array.
     */
    var freeze = copyImpl;
    return {
        toAssocArray: toAssocArray, 
        thaw: thaw, 
        freeze: freeze, 
        spliceSTArray: spliceSTArray, 
        pushAllSTArray: pushAllSTArray, 
        pushSTArray: pushSTArray, 
        pokeSTArray: pokeSTArray, 
        peekSTArray: peekSTArray, 
        emptySTArray: emptySTArray, 
        runSTArray: runSTArray
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
    /**
     *  | A partial function that extracts the value from the `Just` data
     *  | constructor. Passing `Nothing` to `fromJust` will throw an error at
     *  | runtime.
     */
    var fromJust = function (_136) {
        if (_136 instanceof Data_Maybe.Just) {
            return _136.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    
    /**
     *  | Get all but the first element of a non-empty array.
     *  |
     *  | Running time: `O(n)`, where `n` is the length of the array.
     */
    var tail = function (_137) {
        if (_137.length >= 1) {
            var _581 = _137.slice(1);
            return _581;
        };
        throw new Error("Failed pattern match");
    };
    
    /**
     *  | Get the last element of a non-empty array.
     *  |
     *  | Running time: `O(1)`.
     */
    var last = function (xs) {
        return xs[Data_Array.length(xs) - 1];
    };
    
    /**
     *  | Get all but the last element of a non-empty array.
     *  |
     *  | Running time: `O(n)`, where `n` is the length of the array.
     */
    var init = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Data_Array.init);
    
    /**
     *  | Get the first element of a non-empty array.
     *  |
     *  | Running time: `O(1)`.
     */
    var head = function (xs) {
        return xs[0];
    };
    return {
        init: init, 
        last: last, 
        tail: tail, 
        head: head
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidUnit = new Monoid(function () {
        return Prelude.semigroupUnit;
    }, Prelude.unit);
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidMaybe = function (__dict_Semigroup_68) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_68);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    var monoidArr = function (__dict_Monoid_69) {
        return new Monoid(function () {
            return Prelude.semigroupArr(__dict_Monoid_69["__superclass_Prelude.Semigroup_0"]());
        }, Prelude["const"](mempty(__dict_Monoid_69)));
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidString: monoidString, 
        monoidArray: monoidArray, 
        monoidUnit: monoidUnit, 
        monoidArr: monoidArr, 
        monoidMaybe: monoidMaybe
    };
})();
var PS = PS || {};
PS.Data_Monoid_Additive = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | Monoid and semigroup for semirings under addition.
     *  |
     *  | ``` purescript
     *  | Additive x <> Additive y == Additive (x + y)
     *  | mempty :: Additive _ == Additive zero
     *  | ```
     */
    var Additive = function (x) {
        return x;
    };
    var showAdditive = function (__dict_Show_70) {
        return new Prelude.Show(function (_151) {
            return "Additive (" + (Prelude.show(__dict_Show_70)(_151) + ")");
        });
    };
    var semigroupAdditive = function (__dict_Semiring_71) {
        return new Prelude.Semigroup(function (_152) {
            return function (_153) {
                return Prelude["+"](__dict_Semiring_71)(_152)(_153);
            };
        });
    };
    var runAdditive = function (_138) {
        return _138;
    };
    var monoidAdditive = function (__dict_Semiring_73) {
        return new Data_Monoid.Monoid(function () {
            return semigroupAdditive(__dict_Semiring_73);
        }, Prelude.zero(__dict_Semiring_73));
    };
    var functorAdditive = new Prelude.Functor(function (_145) {
        return function (_146) {
            return _145(_146);
        };
    });
    var extendAdditive = new Control_Extend.Extend(function (f) {
        return function (x) {
            return f(x);
        };
    }, function () {
        return functorAdditive;
    });
    var eqAdditive = function (__dict_Eq_74) {
        return new Prelude.Eq(function (_141) {
            return function (_142) {
                return Prelude["/="](__dict_Eq_74)(_141)(_142);
            };
        }, function (_139) {
            return function (_140) {
                return Prelude["=="](__dict_Eq_74)(_139)(_140);
            };
        });
    };
    var ordAdditive = function (__dict_Ord_72) {
        return new Prelude.Ord(function () {
            return eqAdditive(__dict_Ord_72["__superclass_Prelude.Eq_0"]());
        }, function (_143) {
            return function (_144) {
                return Prelude.compare(__dict_Ord_72)(_143)(_144);
            };
        });
    };
    var comonadAdditive = new Control_Comonad.Comonad(function () {
        return extendAdditive;
    }, runAdditive);
    var applyAdditive = new Prelude.Apply(function (_147) {
        return function (_148) {
            return _147(_148);
        };
    }, function () {
        return functorAdditive;
    });
    var bindAdditive = new Prelude.Bind(function (_149) {
        return function (_150) {
            return _150(_149);
        };
    }, function () {
        return applyAdditive;
    });
    var applicativeAdditive = new Prelude.Applicative(function () {
        return applyAdditive;
    }, Additive);
    var monadAdditive = new Prelude.Monad(function () {
        return applicativeAdditive;
    }, function () {
        return bindAdditive;
    });
    return {
        Additive: Additive, 
        runAdditive: runAdditive, 
        eqAdditive: eqAdditive, 
        ordAdditive: ordAdditive, 
        functorAdditive: functorAdditive, 
        applyAdditive: applyAdditive, 
        applicativeAdditive: applicativeAdditive, 
        bindAdditive: bindAdditive, 
        monadAdditive: monadAdditive, 
        extendAdditive: extendAdditive, 
        comonadAdditive: comonadAdditive, 
        showAdditive: showAdditive, 
        semigroupAdditive: semigroupAdditive, 
        monoidAdditive: monoidAdditive
    };
})();
var PS = PS || {};
PS.Data_Monoid_All = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | Boolean monoid and semigroup under conjunction.
     *  |
     *  | ``` purescript
     *  | All x <> All y == All (x && y)
     *  | mempty :: All == All true
     *  | ```
     */
    var All = function (x) {
        return x;
    };
    var showAll = new Prelude.Show(function (_161) {
        return "All (" + (Prelude.show(Prelude.showBoolean)(_161) + ")");
    });
    var semigroupAll = new Prelude.Semigroup(function (_162) {
        return function (_163) {
            return _162 && _163;
        };
    });
    var runAll = function (_154) {
        return _154;
    };
    var monoidAll = new Data_Monoid.Monoid(function () {
        return semigroupAll;
    }, true);
    var eqAll = new Prelude.Eq(function (_157) {
        return function (_158) {
            return _157 !== _158;
        };
    }, function (_155) {
        return function (_156) {
            return _155 === _156;
        };
    });
    var ordAll = new Prelude.Ord(function () {
        return eqAll;
    }, function (_159) {
        return function (_160) {
            return Prelude.compare(Prelude.ordBoolean)(_159)(_160);
        };
    });
    return {
        All: All, 
        runAll: runAll, 
        eqAll: eqAll, 
        ordAll: ordAll, 
        showAll: showAll, 
        semigroupAll: semigroupAll, 
        monoidAll: monoidAll
    };
})();
var PS = PS || {};
PS.Data_Monoid_Any = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | Boolean monoid and semigroup under disjunction.
     *  |
     *  | ``` purescript
     *  | Any x <> Any y == Any (x || y)
     *  | mempty :: Any == Any false
     *  | ```
     */
    var Any = function (x) {
        return x;
    };
    var showAny = new Prelude.Show(function (_171) {
        return "Any (" + (Prelude.show(Prelude.showBoolean)(_171) + ")");
    });
    var semigroupAny = new Prelude.Semigroup(function (_172) {
        return function (_173) {
            return _172 || _173;
        };
    });
    var runAny = function (_164) {
        return _164;
    };
    var monoidAny = new Data_Monoid.Monoid(function () {
        return semigroupAny;
    }, false);
    var eqAny = new Prelude.Eq(function (_167) {
        return function (_168) {
            return _167 !== _168;
        };
    }, function (_165) {
        return function (_166) {
            return _165 === _166;
        };
    });
    var ordAny = new Prelude.Ord(function () {
        return eqAny;
    }, function (_169) {
        return function (_170) {
            return Prelude.compare(Prelude.ordBoolean)(_169)(_170);
        };
    });
    return {
        Any: Any, 
        runAny: runAny, 
        eqAny: eqAny, 
        ordAny: ordAny, 
        showAny: showAny, 
        semigroupAny: semigroupAny, 
        monoidAny: monoidAny
    };
})();
var PS = PS || {};
PS.Data_Monoid_Dual = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | The dual of a monoid.
     *  |
     *  | ``` purescript
     *  | Dual x <> Dual y == Dual (y <> x)
     *  | mempty :: Dual _ == Dual mempty
     *  | ```
     */
    var Dual = function (x) {
        return x;
    };
    var showDual = function (__dict_Show_75) {
        return new Prelude.Show(function (_187) {
            return "Dual (" + (Prelude.show(__dict_Show_75)(_187) + ")");
        });
    };
    var semigroupDual = function (__dict_Semigroup_76) {
        return new Prelude.Semigroup(function (_188) {
            return function (_189) {
                return Prelude["<>"](__dict_Semigroup_76)(_189)(_188);
            };
        });
    };
    var runDual = function (_174) {
        return _174;
    };
    var monoidDual = function (__dict_Monoid_78) {
        return new Data_Monoid.Monoid(function () {
            return semigroupDual(__dict_Monoid_78["__superclass_Prelude.Semigroup_0"]());
        }, Data_Monoid.mempty(__dict_Monoid_78));
    };
    var functorDual = new Prelude.Functor(function (_181) {
        return function (_182) {
            return _181(_182);
        };
    });
    var extendDual = new Control_Extend.Extend(function (f) {
        return function (x) {
            return f(x);
        };
    }, function () {
        return functorDual;
    });
    var eqDual = function (__dict_Eq_79) {
        return new Prelude.Eq(function (_177) {
            return function (_178) {
                return Prelude["/="](__dict_Eq_79)(_177)(_178);
            };
        }, function (_175) {
            return function (_176) {
                return Prelude["=="](__dict_Eq_79)(_175)(_176);
            };
        });
    };
    var ordDual = function (__dict_Ord_77) {
        return new Prelude.Ord(function () {
            return eqDual(__dict_Ord_77["__superclass_Prelude.Eq_0"]());
        }, function (_179) {
            return function (_180) {
                return Prelude.compare(__dict_Ord_77)(_179)(_180);
            };
        });
    };
    var comonadDual = new Control_Comonad.Comonad(function () {
        return extendDual;
    }, runDual);
    var applyDual = new Prelude.Apply(function (_183) {
        return function (_184) {
            return _183(_184);
        };
    }, function () {
        return functorDual;
    });
    var bindDual = new Prelude.Bind(function (_185) {
        return function (_186) {
            return _186(_185);
        };
    }, function () {
        return applyDual;
    });
    var applicativeDual = new Prelude.Applicative(function () {
        return applyDual;
    }, Dual);
    var monadDual = new Prelude.Monad(function () {
        return applicativeDual;
    }, function () {
        return bindDual;
    });
    return {
        Dual: Dual, 
        runDual: runDual, 
        eqDual: eqDual, 
        ordDual: ordDual, 
        functorDual: functorDual, 
        applyDual: applyDual, 
        applicativeDual: applicativeDual, 
        bindDual: bindDual, 
        monadDual: monadDual, 
        extendDual: extendDual, 
        comonadDual: comonadDual, 
        showDual: showDual, 
        semigroupDual: semigroupDual, 
        monoidDual: monoidDual
    };
})();
var PS = PS || {};
PS.Data_Monoid_Endo = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | Monoid of endomorphisms under composition.
     *  |
     *  | Composes of functions of type `a -> a`:
     *  | ``` purescript
     *  | Endo f <> Endo g == Endo (f <<< g)
     *  | mempty :: Endo _ == Endo id
     *  | ```
     */
    var Endo = function (x) {
        return x;
    };
    var semigroupEndo = new Prelude.Semigroup(function (_191) {
        return function (_192) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(_191)(_192);
        };
    });
    var runEndo = function (_190) {
        return _190;
    };
    var monoidEndo = new Data_Monoid.Monoid(function () {
        return semigroupEndo;
    }, Prelude.id(Prelude.categoryArr));
    return {
        Endo: Endo, 
        runEndo: runEndo, 
        semigroupEndo: semigroupEndo, 
        monoidEndo: monoidEndo
    };
})();
var PS = PS || {};
PS.Data_Monoid_Multiplicative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | Monoid and semigroup for semirings under multiplication.
     *  |
     *  | ``` purescript
     *  | Multiplicative x <> Multiplicative y == Multiplicative (x * y)
     *  | mempty :: Multiplicative _ == Multiplicative one
     *  | ```
     */
    var Multiplicative = function (x) {
        return x;
    };
    var showMultiplicative = function (__dict_Show_80) {
        return new Prelude.Show(function (_206) {
            return "Multiplicative (" + (Prelude.show(__dict_Show_80)(_206) + ")");
        });
    };
    var semigroupMultiplicative = function (__dict_Semiring_81) {
        return new Prelude.Semigroup(function (_207) {
            return function (_208) {
                return Prelude["*"](__dict_Semiring_81)(_207)(_208);
            };
        });
    };
    var runMultiplicative = function (_193) {
        return _193;
    };
    var monoidMultiplicative = function (__dict_Semiring_83) {
        return new Data_Monoid.Monoid(function () {
            return semigroupMultiplicative(__dict_Semiring_83);
        }, Prelude.one(__dict_Semiring_83));
    };
    var functorMultiplicative = new Prelude.Functor(function (_200) {
        return function (_201) {
            return _200(_201);
        };
    });
    var extendAdditive = new Control_Extend.Extend(function (f) {
        return function (x) {
            return f(x);
        };
    }, function () {
        return functorMultiplicative;
    });
    var eqMultiplicative = function (__dict_Eq_84) {
        return new Prelude.Eq(function (_196) {
            return function (_197) {
                return Prelude["/="](__dict_Eq_84)(_196)(_197);
            };
        }, function (_194) {
            return function (_195) {
                return Prelude["=="](__dict_Eq_84)(_194)(_195);
            };
        });
    };
    var ordMultiplicative = function (__dict_Ord_82) {
        return new Prelude.Ord(function () {
            return eqMultiplicative(__dict_Ord_82["__superclass_Prelude.Eq_0"]());
        }, function (_198) {
            return function (_199) {
                return Prelude.compare(__dict_Ord_82)(_198)(_199);
            };
        });
    };
    var comonadAdditive = new Control_Comonad.Comonad(function () {
        return extendAdditive;
    }, runMultiplicative);
    var applyMultiplicative = new Prelude.Apply(function (_202) {
        return function (_203) {
            return _202(_203);
        };
    }, function () {
        return functorMultiplicative;
    });
    var bindMultiplicative = new Prelude.Bind(function (_204) {
        return function (_205) {
            return _205(_204);
        };
    }, function () {
        return applyMultiplicative;
    });
    var applicativeMultiplicative = new Prelude.Applicative(function () {
        return applyMultiplicative;
    }, Multiplicative);
    var monadMultiplicative = new Prelude.Monad(function () {
        return applicativeMultiplicative;
    }, function () {
        return bindMultiplicative;
    });
    return {
        Multiplicative: Multiplicative, 
        runMultiplicative: runMultiplicative, 
        eqMultiplicative: eqMultiplicative, 
        ordMultiplicative: ordMultiplicative, 
        functorMultiplicative: functorMultiplicative, 
        applyMultiplicative: applyMultiplicative, 
        applicativeMultiplicative: applicativeMultiplicative, 
        bindMultiplicative: bindMultiplicative, 
        monadMultiplicative: monadMultiplicative, 
        extendAdditive: extendAdditive, 
        comonadAdditive: comonadAdditive, 
        showMultiplicative: showMultiplicative, 
        semigroupMultiplicative: semigroupMultiplicative, 
        monoidMultiplicative: monoidMultiplicative
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    var zip = Data_Array.zipWith(Tuple.create);
    var unzip = function (_219) {
        if (_219.length >= 1) {
            var _660 = _219.slice(1);
            var _654 = unzip(_660);
            return new Tuple(Prelude[":"]((_219[0]).value0)(_654.value0), Prelude[":"]((_219[0]).value1)(_654.value1));
        };
        if (_219.length === 0) {
            return new Tuple([  ], [  ]);
        };
        throw new Error("Failed pattern match");
    };
    var uncurry = function (_217) {
        return function (_218) {
            return _217(_218.value0)(_218.value1);
        };
    };
    var swap = function (_220) {
        return new Tuple(_220.value1, _220.value0);
    };
    var snd = function (_216) {
        return _216.value1;
    };
    var showTuple = function (__dict_Show_85) {
        return function (__dict_Show_86) {
            return new Prelude.Show(function (_221) {
                return "Tuple (" + (Prelude.show(__dict_Show_85)(_221.value0) + (") (" + (Prelude.show(__dict_Show_86)(_221.value1) + ")")));
            });
        };
    };
    var semigroupoidTuple = new Prelude.Semigroupoid(function (_226) {
        return function (_227) {
            return new Tuple(_227.value0, _226.value1);
        };
    });
    var semigroupTuple = function (__dict_Semigroup_87) {
        return function (__dict_Semigroup_88) {
            return new Prelude.Semigroup(function (_228) {
                return function (_229) {
                    return new Tuple(Prelude["<>"](__dict_Semigroup_87)(_228.value0)(_229.value0), Prelude["<>"](__dict_Semigroup_88)(_228.value1)(_229.value1));
                };
            });
        };
    };
    var monoidTuple = function (__dict_Monoid_91) {
        return function (__dict_Monoid_92) {
            return new Data_Monoid.Monoid(function () {
                return semigroupTuple(__dict_Monoid_91["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_92["__superclass_Prelude.Semigroup_0"]());
            }, new Tuple(Data_Monoid.mempty(__dict_Monoid_91), Data_Monoid.mempty(__dict_Monoid_92)));
        };
    };
    var functorTuple = new Prelude.Functor(function (_230) {
        return function (_231) {
            return new Tuple(_231.value0, _230(_231.value1));
        };
    });
    var fst = function (_215) {
        return _215.value0;
    };
    var lazyLazy1Tuple = function (__dict_Lazy1_94) {
        return function (__dict_Lazy1_95) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer1(__dict_Lazy1_94)(function (_211) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer1(__dict_Lazy1_95)(function (_212) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyLazy2Tuple = function (__dict_Lazy2_96) {
        return function (__dict_Lazy2_97) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer2(__dict_Lazy2_96)(function (_213) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer2(__dict_Lazy2_97)(function (_214) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyTuple = function (__dict_Lazy_98) {
        return function (__dict_Lazy_99) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer(__dict_Lazy_98)(function (_209) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer(__dict_Lazy_99)(function (_210) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var extendTuple = new Control_Extend.Extend(function (_236) {
        return function (_237) {
            return new Tuple(_237.value0, _236(_237));
        };
    }, function () {
        return functorTuple;
    });
    var eqTuple = function (__dict_Eq_100) {
        return function (__dict_Eq_101) {
            return new Prelude.Eq(function (t1) {
                return function (t2) {
                    return !Prelude["=="](eqTuple(__dict_Eq_100)(__dict_Eq_101))(t1)(t2);
                };
            }, function (_222) {
                return function (_223) {
                    return Prelude["=="](__dict_Eq_100)(_222.value0)(_223.value0) && Prelude["=="](__dict_Eq_101)(_222.value1)(_223.value1);
                };
            });
        };
    };
    var ordTuple = function (__dict_Ord_89) {
        return function (__dict_Ord_90) {
            return new Prelude.Ord(function () {
                return eqTuple(__dict_Ord_89["__superclass_Prelude.Eq_0"]())(__dict_Ord_90["__superclass_Prelude.Eq_0"]());
            }, function (_224) {
                return function (_225) {
                    var _711 = Prelude.compare(__dict_Ord_89)(_224.value0)(_225.value0);
                    if (_711 instanceof Prelude.EQ) {
                        return Prelude.compare(__dict_Ord_90)(_224.value1)(_225.value1);
                    };
                    return _711;
                };
            });
        };
    };
    var curry = function (f) {
        return function (a) {
            return function (b) {
                return f(new Tuple(a, b));
            };
        };
    };
    var comonadTuple = new Control_Comonad.Comonad(function () {
        return extendTuple;
    }, snd);
    var applyTuple = function (__dict_Semigroup_103) {
        return new Prelude.Apply(function (_232) {
            return function (_233) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_103)(_232.value0)(_233.value0), _232.value1(_233.value1));
            };
        }, function () {
            return functorTuple;
        });
    };
    var bindTuple = function (__dict_Semigroup_102) {
        return new Prelude.Bind(function (_234) {
            return function (_235) {
                var _724 = _235(_234.value1);
                return new Tuple(Prelude["<>"](__dict_Semigroup_102)(_234.value0)(_724.value0), _724.value1);
            };
        }, function () {
            return applyTuple(__dict_Semigroup_102);
        });
    };
    var applicativeTuple = function (__dict_Monoid_104) {
        return new Prelude.Applicative(function () {
            return applyTuple(__dict_Monoid_104["__superclass_Prelude.Semigroup_0"]());
        }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_104)));
    };
    var monadTuple = function (__dict_Monoid_93) {
        return new Prelude.Monad(function () {
            return applicativeTuple(__dict_Monoid_93);
        }, function () {
            return bindTuple(__dict_Monoid_93["__superclass_Prelude.Semigroup_0"]());
        });
    };
    return {
        Tuple: Tuple, 
        swap: swap, 
        unzip: unzip, 
        zip: zip, 
        uncurry: uncurry, 
        curry: curry, 
        snd: snd, 
        fst: fst, 
        showTuple: showTuple, 
        eqTuple: eqTuple, 
        ordTuple: ordTuple, 
        semigroupoidTuple: semigroupoidTuple, 
        semigroupTuple: semigroupTuple, 
        monoidTuple: monoidTuple, 
        functorTuple: functorTuple, 
        applyTuple: applyTuple, 
        applicativeTuple: applicativeTuple, 
        bindTuple: bindTuple, 
        monadTuple: monadTuple, 
        extendTuple: extendTuple, 
        comonadTuple: comonadTuple, 
        lazyTuple: lazyTuple, 
        lazyLazy1Tuple: lazyLazy1Tuple, 
        lazyLazy2Tuple: lazyLazy2Tuple
    };
})();
var PS = PS || {};
PS.Data_Tuple_Nested = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var $div$bslash = function (a) {
        return function (b) {
            return new Data_Tuple.Tuple(a, b);
        };
    };
    var con9 = function (f) {
        return function (_245) {
            return f(_245.value0)(_245.value1.value0)(_245.value1.value1.value0)(_245.value1.value1.value1.value0)(_245.value1.value1.value1.value1.value0)(_245.value1.value1.value1.value1.value1.value0)(_245.value1.value1.value1.value1.value1.value1.value0)(_245.value1.value1.value1.value1.value1.value1.value1.value0)(_245.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con8 = function (f) {
        return function (_244) {
            return f(_244.value0)(_244.value1.value0)(_244.value1.value1.value0)(_244.value1.value1.value1.value0)(_244.value1.value1.value1.value1.value0)(_244.value1.value1.value1.value1.value1.value0)(_244.value1.value1.value1.value1.value1.value1.value0)(_244.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con7 = function (f) {
        return function (_243) {
            return f(_243.value0)(_243.value1.value0)(_243.value1.value1.value0)(_243.value1.value1.value1.value0)(_243.value1.value1.value1.value1.value0)(_243.value1.value1.value1.value1.value1.value0)(_243.value1.value1.value1.value1.value1.value1);
        };
    };
    var con6 = function (f) {
        return function (_242) {
            return f(_242.value0)(_242.value1.value0)(_242.value1.value1.value0)(_242.value1.value1.value1.value0)(_242.value1.value1.value1.value1.value0)(_242.value1.value1.value1.value1.value1);
        };
    };
    var con5 = function (f) {
        return function (_241) {
            return f(_241.value0)(_241.value1.value0)(_241.value1.value1.value0)(_241.value1.value1.value1.value0)(_241.value1.value1.value1.value1);
        };
    };
    var con4 = function (f) {
        return function (_240) {
            return f(_240.value0)(_240.value1.value0)(_240.value1.value1.value0)(_240.value1.value1.value1);
        };
    };
    var con3 = function (f) {
        return function (_239) {
            return f(_239.value0)(_239.value1.value0)(_239.value1.value1);
        };
    };
    var con2 = function (f) {
        return function (_238) {
            return f(_238.value0)(_238.value1);
        };
    };
    var con10 = function (f) {
        return function (_246) {
            return f(_246.value0)(_246.value1.value0)(_246.value1.value1.value0)(_246.value1.value1.value1.value0)(_246.value1.value1.value1.value1.value0)(_246.value1.value1.value1.value1.value1.value0)(_246.value1.value1.value1.value1.value1.value1.value0)(_246.value1.value1.value1.value1.value1.value1.value1.value0)(_246.value1.value1.value1.value1.value1.value1.value1.value1.value0)(_246.value1.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    return {
        "/\\": $div$bslash, 
        con10: con10, 
        con9: con9, 
        con8: con8, 
        con7: con7, 
        con6: con6, 
        con5: con5, 
        con4: con4, 
        con3: con3, 
        con2: con2
    };
})();
var PS = PS || {};
PS.Data_Monoid_First = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | Monoid returning the first (left-most) non-Nothing value.
     *  |
     *  | ``` purescript
     *  | First (Just x) <> First (Just y) == First (Just x)
     *  | First Nothing <> First (Just y) == First (Just x)
     *  | First Nothing <> Nothing == First Nothing
     *  | mempty :: First _ == First Nothing
     *  | ```
     */
    var First = function (x) {
        return x;
    };
    var showFirst = function (__dict_Show_105) {
        return new Prelude.Show(function (_260) {
            return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_105))(_260) + ")");
        });
    };
    var semigroupFirst = new Prelude.Semigroup(function (_261) {
        return function (_262) {
            if (_261 instanceof Data_Maybe.Just) {
                return _261;
            };
            return _262;
        };
    });
    var runFirst = function (_247) {
        return _247;
    };
    var monoidFirst = new Data_Monoid.Monoid(function () {
        return semigroupFirst;
    }, Data_Maybe.Nothing.value);
    var functorFirst = new Prelude.Functor(function (_254) {
        return function (_255) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(_254)(_255);
        };
    });
    var extendFirst = new Control_Extend.Extend(function (f) {
        return function (x) {
            return Control_Extend["<<="](extendFirst)(f)(x);
        };
    }, function () {
        return functorFirst;
    });
    var eqFirst = function (__dict_Eq_107) {
        return new Prelude.Eq(function (_250) {
            return function (_251) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_107))(_250)(_251);
            };
        }, function (_248) {
            return function (_249) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_107))(_248)(_249);
            };
        });
    };
    var ordFirst = function (__dict_Ord_106) {
        return new Prelude.Ord(function () {
            return eqFirst(__dict_Ord_106["__superclass_Prelude.Eq_0"]());
        }, function (_252) {
            return function (_253) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_106))(_252)(_253);
            };
        });
    };
    var applyFirst = new Prelude.Apply(function (_256) {
        return function (_257) {
            return Prelude["<*>"](Data_Maybe.applyMaybe)(_256)(_257);
        };
    }, function () {
        return functorFirst;
    });
    var bindFirst = new Prelude.Bind(function (_258) {
        return function (_259) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(_258)(Prelude["<<<"](Prelude.semigroupoidArr)(runFirst)(_259));
        };
    }, function () {
        return applyFirst;
    });
    var applicativeFirst = new Prelude.Applicative(function () {
        return applyFirst;
    }, Prelude["<<<"](Prelude.semigroupoidArr)(First)(Prelude.pure(Data_Maybe.applicativeMaybe)));
    var monadFirst = new Prelude.Monad(function () {
        return applicativeFirst;
    }, function () {
        return bindFirst;
    });
    return {
        First: First, 
        runFirst: runFirst, 
        eqFirst: eqFirst, 
        ordFirst: ordFirst, 
        functorFirst: functorFirst, 
        applyFirst: applyFirst, 
        applicativeFirst: applicativeFirst, 
        bindFirst: bindFirst, 
        monadFirst: monadFirst, 
        extendFirst: extendFirst, 
        showFirst: showFirst, 
        semigroupFirst: semigroupFirst, 
        monoidFirst: monoidFirst
    };
})();
var PS = PS || {};
PS.Data_Monoid_Last = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | Monoid returning the last (right-most) non-Nothing value.
     *  |
     *  | ``` purescript
     *  | Last (Just x) <> Last (Just y) == Last (Just y)
     *  | Last (Just x) <> Nothing == Last (Just x)
     *  | Last Nothing <> Nothing == Last Nothing
     *  | mempty :: Last _ == Last Nothing
     *  | ```
     */
    var Last = function (x) {
        return x;
    };
    var showLast = function (__dict_Show_108) {
        return new Prelude.Show(function (_276) {
            return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_108))(_276) + ")");
        });
    };
    var semigroupLast = new Prelude.Semigroup(function (_277) {
        return function (_278) {
            if (_278 instanceof Data_Maybe.Just) {
                return _278;
            };
            if (_278 instanceof Data_Maybe.Nothing) {
                return _277;
            };
            throw new Error("Failed pattern match");
        };
    });
    var runLast = function (_263) {
        return _263;
    };
    var monoidLast = new Data_Monoid.Monoid(function () {
        return semigroupLast;
    }, Data_Maybe.Nothing.value);
    var functorLast = new Prelude.Functor(function (_270) {
        return function (_271) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(_270)(_271);
        };
    });
    var extendLast = new Control_Extend.Extend(function (f) {
        return function (x) {
            return Control_Extend["<<="](extendLast)(f)(x);
        };
    }, function () {
        return functorLast;
    });
    var eqLast = function (__dict_Eq_110) {
        return new Prelude.Eq(function (_266) {
            return function (_267) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_110))(_266)(_267);
            };
        }, function (_264) {
            return function (_265) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_110))(_264)(_265);
            };
        });
    };
    var ordLast = function (__dict_Ord_109) {
        return new Prelude.Ord(function () {
            return eqLast(__dict_Ord_109["__superclass_Prelude.Eq_0"]());
        }, function (_268) {
            return function (_269) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_109))(_268)(_269);
            };
        });
    };
    var applyLast = new Prelude.Apply(function (_272) {
        return function (_273) {
            return Prelude["<*>"](Data_Maybe.applyMaybe)(_272)(_273);
        };
    }, function () {
        return functorLast;
    });
    var bindLast = new Prelude.Bind(function (_274) {
        return function (_275) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(_274)(Prelude["<<<"](Prelude.semigroupoidArr)(runLast)(_275));
        };
    }, function () {
        return applyLast;
    });
    var applicativeLast = new Prelude.Applicative(function () {
        return applyLast;
    }, Prelude["<<<"](Prelude.semigroupoidArr)(Last)(Prelude.pure(Data_Maybe.applicativeMaybe)));
    var monadLast = new Prelude.Monad(function () {
        return applicativeLast;
    }, function () {
        return bindLast;
    });
    return {
        Last: Last, 
        runLast: runLast, 
        eqLast: eqLast, 
        ordLast: ordLast, 
        functorLast: functorLast, 
        applyLast: applyLast, 
        applicativeLast: applicativeLast, 
        bindLast: bindLast, 
        monadLast: monadLast, 
        extendLast: extendLast, 
        showLast: showLast, 
        semigroupLast: semigroupLast, 
        monoidLast: monoidLast
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_111) {
        return function (__dict_Foldable_112) {
            return function (f) {
                return foldr(__dict_Foldable_112)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_111["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_111)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_113) {
        return function (__dict_Foldable_114) {
            return Prelude.flip(traverse_(__dict_Applicative_113)(__dict_Foldable_114));
        };
    };
    var sequence_ = function (__dict_Applicative_115) {
        return function (__dict_Foldable_116) {
            return traverse_(__dict_Applicative_115)(__dict_Foldable_116)(Prelude.id(Prelude.categoryArr));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var intercalate = function (__dict_Foldable_117) {
        return function (__dict_Monoid_118) {
            return function (sep) {
                return function (xs) {
                    var go = function (_344) {
                        return function (_345) {
                            if (_344.init) {
                                return {
                                    init: false, 
                                    acc: _345
                                };
                            };
                            return {
                                init: false, 
                                acc: Prelude["<>"](__dict_Monoid_118["__superclass_Prelude.Semigroup_0"]())(_344.acc)(Prelude["<>"](__dict_Monoid_118["__superclass_Prelude.Semigroup_0"]())(sep)(_345))
                            };
                        };
                    };
                    return (foldl(__dict_Foldable_117)(go)({
                        init: true, 
                        acc: Data_Monoid.mempty(__dict_Monoid_118)
                    })(xs)).acc;
                };
            };
        };
    };
    var mconcat = function (__dict_Foldable_119) {
        return function (__dict_Monoid_120) {
            return foldl(__dict_Foldable_119)(Prelude["<>"](__dict_Monoid_120["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_120));
        };
    };
    var or = function (__dict_Foldable_121) {
        return foldl(__dict_Foldable_121)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var product = function (__dict_Foldable_122) {
        return foldl(__dict_Foldable_122)(Prelude["*"](Prelude.semiringNumber))(1);
    };
    var sum = function (__dict_Foldable_123) {
        return foldl(__dict_Foldable_123)(Prelude["+"](Prelude.semiringNumber))(0);
    };
    var foldableTuple = new Foldable(function (__dict_Monoid_124) {
        return function (_302) {
            return function (_303) {
                return _302(_303.value1);
            };
        };
    }, function (_299) {
        return function (_300) {
            return function (_301) {
                return _299(_300)(_301.value1);
            };
        };
    }, function (_296) {
        return function (_297) {
            return function (_298) {
                return _296(_298.value1)(_297);
            };
        };
    });
    var foldableMultiplicative = new Foldable(function (__dict_Monoid_125) {
        return function (_342) {
            return function (_343) {
                return _342(_343);
            };
        };
    }, function (_339) {
        return function (_340) {
            return function (_341) {
                return _339(_340)(_341);
            };
        };
    }, function (_336) {
        return function (_337) {
            return function (_338) {
                return _336(_338)(_337);
            };
        };
    });
    var foldableMaybe = new Foldable(function (__dict_Monoid_126) {
        return function (_294) {
            return function (_295) {
                if (_295 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_126);
                };
                if (_295 instanceof Data_Maybe.Just) {
                    return _294(_295.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_291) {
        return function (_292) {
            return function (_293) {
                if (_293 instanceof Data_Maybe.Nothing) {
                    return _292;
                };
                if (_293 instanceof Data_Maybe.Just) {
                    return _291(_292)(_293.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_288) {
        return function (_289) {
            return function (_290) {
                if (_290 instanceof Data_Maybe.Nothing) {
                    return _289;
                };
                if (_290 instanceof Data_Maybe.Just) {
                    return _288(_290.value0)(_289);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableEither = new Foldable(function (__dict_Monoid_127) {
        return function (_286) {
            return function (_287) {
                if (_287 instanceof Data_Either.Left) {
                    return Data_Monoid.mempty(__dict_Monoid_127);
                };
                if (_287 instanceof Data_Either.Right) {
                    return _286(_287.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_283) {
        return function (_284) {
            return function (_285) {
                if (_285 instanceof Data_Either.Left) {
                    return _284;
                };
                if (_285 instanceof Data_Either.Right) {
                    return _283(_284)(_285.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_280) {
        return function (_281) {
            return function (_282) {
                if (_282 instanceof Data_Either.Left) {
                    return _281;
                };
                if (_282 instanceof Data_Either.Right) {
                    return _280(_282.value0)(_281);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableDual = new Foldable(function (__dict_Monoid_128) {
        return function (_318) {
            return function (_319) {
                return _318(_319);
            };
        };
    }, function (_315) {
        return function (_316) {
            return function (_317) {
                return _315(_316)(_317);
            };
        };
    }, function (_312) {
        return function (_313) {
            return function (_314) {
                return _312(_314)(_313);
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_129) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_129["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_129))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldableAdditive = new Foldable(function (__dict_Monoid_130) {
        return function (_310) {
            return function (_311) {
                return _310(_311);
            };
        };
    }, function (_307) {
        return function (_308) {
            return function (_309) {
                return _307(_308)(_309);
            };
        };
    }, function (_304) {
        return function (_305) {
            return function (_306) {
                return _304(_306)(_305);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var foldableFirst = new Foldable(function (__dict_Monoid_131) {
        return function (_326) {
            return function (_327) {
                return foldMap(foldableMaybe)(__dict_Monoid_131)(_326)(_327);
            };
        };
    }, function (_323) {
        return function (_324) {
            return function (_325) {
                return foldl(foldableMaybe)(_323)(_324)(_325);
            };
        };
    }, function (_320) {
        return function (_321) {
            return function (_322) {
                return foldr(foldableMaybe)(_320)(_321)(_322);
            };
        };
    });
    var foldableLast = new Foldable(function (__dict_Monoid_132) {
        return function (_334) {
            return function (_335) {
                return foldMap(foldableMaybe)(__dict_Monoid_132)(_334)(_335);
            };
        };
    }, function (_331) {
        return function (_332) {
            return function (_333) {
                return foldl(foldableMaybe)(_331)(_332)(_333);
            };
        };
    }, function (_328) {
        return function (_329) {
            return function (_330) {
                return foldr(foldableMaybe)(_328)(_329)(_330);
            };
        };
    });
    var lookup = function (__dict_Eq_133) {
        return function (__dict_Foldable_134) {
            return function (a) {
                return function (f) {
                    return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_134)(Data_Monoid_First.monoidFirst)(function (_279) {
                        var _946 = Prelude["=="](__dict_Eq_133)(a)(_279.value0);
                        if (_946) {
                            return new Data_Maybe.Just(_279.value1);
                        };
                        if (!_946) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match");
                    })(f));
                };
            };
        };
    };
    var fold = function (__dict_Foldable_135) {
        return function (__dict_Monoid_136) {
            return foldMap(__dict_Foldable_135)(__dict_Monoid_136)(Prelude.id(Prelude.categoryArr));
        };
    };
    var find = function (__dict_Foldable_137) {
        return function (p) {
            return function (f) {
                var _950 = foldMap(__dict_Foldable_137)(Data_Monoid.monoidArray)(function (x) {
                    var _949 = p(x);
                    if (_949) {
                        return [ x ];
                    };
                    if (!_949) {
                        return [  ];
                    };
                    throw new Error("Failed pattern match");
                })(f);
                if (_950.length >= 1) {
                    var _952 = _950.slice(1);
                    return new Data_Maybe.Just(_950[0]);
                };
                if (_950.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var any = function (__dict_Foldable_138) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_138)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_139) {
        return function (__dict_Foldable_140) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_140))(Prelude["=="](__dict_Eq_139));
        };
    };
    var notElem = function (__dict_Eq_141) {
        return function (__dict_Foldable_142) {
            return function (x) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_141)(__dict_Foldable_142)(x));
            };
        };
    };
    var and = function (__dict_Foldable_143) {
        return foldl(__dict_Foldable_143)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    var all = function (__dict_Foldable_144) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_144)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        lookup: lookup, 
        find: find, 
        notElem: notElem, 
        elem: elem, 
        product: product, 
        sum: sum, 
        all: all, 
        any: any, 
        or: or, 
        and: and, 
        intercalate: intercalate, 
        mconcat: mconcat, 
        sequence_: sequence_, 
        for_: for_, 
        traverse_: traverse_, 
        fold: fold, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray, 
        foldableEither: foldableEither, 
        foldableMaybe: foldableMaybe, 
        foldableTuple: foldableTuple, 
        foldableAdditive: foldableAdditive, 
        foldableDual: foldableDual, 
        foldableFirst: foldableFirst, 
        foldableLast: foldableLast, 
        foldableMultiplicative: foldableMultiplicative
    };
})();
var PS = PS || {};
PS.Data_Path = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    var Directory = (function () {
        function Directory(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Directory.create = function (value0) {
            return function (value1) {
                return new Directory(value0, value1);
            };
        };
        return Directory;
    })();
    var File = (function () {
        function File(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        File.create = function (value0) {
            return function (value1) {
                return new File(value0, value1);
            };
        };
        return File;
    })();
    var size = function (_349) {
        if (_349 instanceof File) {
            return new Data_Maybe.Just(_349.value1);
        };
        return Data_Maybe.Nothing.value;
    };
    var root = new Directory("/", [ new Directory("/bin/", [ new File("/bin/cp", 24800), new File("/bin/ls", 34700), new File("/bin/mv", 20200) ]), new Directory("/etc/", [ new File("/etc/hosts", 300) ]), new Directory("/home/", [ new Directory("/home/user/", [ new File("/home/user/todo.txt", 1020), new Directory("/home/user/code/", [ new Directory("/home/user/code/js/", [ new File("/home/user/code/js/test.js", 40000) ]), new Directory("/home/user/code/haskell/", [ new File("/home/user/code/haskell/test.hs", 5000) ]) ]) ]) ]) ]);
    var ls = function (_348) {
        if (_348 instanceof Directory) {
            return _348.value1;
        };
        return [  ];
    };
    var isDirectory = function (_347) {
        if (_347 instanceof Directory) {
            return true;
        };
        return false;
    };
    var filename = function (_346) {
        if (_346 instanceof File) {
            return _346.value0;
        };
        if (_346 instanceof Directory) {
            return _346.value0;
        };
        throw new Error("Failed pattern match");
    };
    var showPath = new Prelude.Show(filename);
    return {
        size: size, 
        isDirectory: isDirectory, 
        filename: filename, 
        ls: ls, 
        root: root, 
        showPath: showPath
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;
    
    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;
    
    function fromCharArray(a) {
      return a.join('');
    }
    ;
    
    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;
    
    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;
    
    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;
    
    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;
    
    function length(s) {
      return s.length;
    }
    ;
    
    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;
    
    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;
    
    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    
    function count(p){      
      return function(s){
        var i;
        for(i = 0; i < s.length && p(s.charAt(i)); i++){};
        return i;
      };      
    }
    ;
    
    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;
    
    function toCharArray(s) {
      return s.split('');
    }
    ;
    
    function toLower(s) {
      return s.toLowerCase();
    }
    ;
    
    function toUpper(s) {
      return s.toUpperCase();
    }
    ;
    
    function trim(s) {
      return s.trim();
    }
    ;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    var takeWhile = function (p) {
        return function (s) {
            return take(count(p)(s))(s);
        };
    };
    var $$null = function (s) {
        return length(s) === 0;
    };
    var uncons = function (_350) {
        if ($$null(_350)) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just({
            head: Data_String_Unsafe.charAt(0)(_350), 
            tail: drop(1)(_350)
        });
    };
    var fromChar = Data_Char.charString;
    var singleton = fromChar;
    var dropWhile = function (p) {
        return function (s) {
            return drop(count(p)(s))(s);
        };
    };
    var charCodeAt = function (n) {
        return function (s) {
            return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    var charAt = function (n) {
        return function (s) {
            return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        joinWith: joinWith, 
        trim: trim, 
        toUpper: toUpper, 
        toLower: toLower, 
        toCharArray: toCharArray, 
        split: split, 
        dropWhile: dropWhile, 
        drop: drop, 
        takeWhile: takeWhile, 
        take: take, 
        count: count, 
        replace: replace, 
        localeCompare: localeCompare, 
        singleton: singleton, 
        length: length, 
        uncons: uncons, 
        "null": $$null, 
        "lastIndexOf'": lastIndexOf$prime, 
        lastIndexOf: lastIndexOf, 
        "indexOf'": indexOf$prime, 
        indexOf: indexOf, 
        fromChar: fromChar, 
        fromCharArray: fromCharArray, 
        charCodeAt: charCodeAt, 
        charAt: charAt
    };
})();
var PS = PS || {};
PS.Data_String_Regex = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_String = PS.Data_String;
    var Data_Function = PS.Data_Function;
    var Data_Maybe = PS.Data_Maybe;
    
  function showRegex$prime(r) {
    return '' + r;
  }
  ;
    
  function regex$prime(s1) {
    return function(s2) {
      return new RegExp(s1, s2);
    };
  }
  ;
    
  function source(r) {
    return r.source;
  }
  ;
    
  function flags(r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  }
  ;
    
  function test(r) {
    return function(s) {
      return r.test(s);
    };
  }
  ;
    
  function _match(r, s, Just, Nothing) {
    var m = s.match(r);
    return m == null ? Nothing : Just(m);
  }
  ;
    
  function replace(r) {
    return function(s1) {
      return function(s2) {
        return s2.replace(r, s1);
      };
    };
  }
  ;
    
  function replace$prime(r) {
    return function(f) {
      return function(s2) {
        return s2.replace(r, function(match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  }
  ;
    
  function search(r) {
    return function(s) {
      return s.search(r);
    };
  }
  ;
    
  function split(r) {
    return function(s) {
      return s.split(r);
    };
  }
  ;
    var showRegex = new Prelude.Show(showRegex$prime);
    var renderFlags = function (flags) {
        return (function () {
            if (flags.global) {
                return "g";
            };
            if (!flags.global) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + ((function () {
            if (flags.ignoreCase) {
                return "i";
            };
            if (!flags.ignoreCase) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + ((function () {
            if (flags.multiline) {
                return "m";
            };
            if (!flags.multiline) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + ((function () {
            if (flags.sticky) {
                return "y";
            };
            if (!flags.sticky) {
                return "";
            };
            throw new Error("Failed pattern match");
        })() + (function () {
            if (flags.unicode) {
                return "u";
            };
            if (!flags.unicode) {
                return "";
            };
            throw new Error("Failed pattern match");
        })())));
    };
    var regex = function (source) {
        return function (flags) {
            return regex$prime(source)(renderFlags(flags));
        };
    };
    var parseFlags = function (s) {
        return {
            global: Data_String.indexOf("g")(s) >= 0, 
            ignoreCase: Data_String.indexOf("i")(s) >= 0, 
            multiline: Data_String.indexOf("m")(s) >= 0, 
            sticky: Data_String.indexOf("y")(s) >= 0, 
            unicode: Data_String.indexOf("u")(s) >= 0
        };
    };
    var noFlags = {
        global: false, 
        ignoreCase: false, 
        multiline: false, 
        sticky: false, 
        unicode: false
    };
    var match = function (r) {
        return function (s) {
            return _match(r, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        noFlags: noFlags, 
        split: split, 
        search: search, 
        "replace'": replace$prime, 
        replace: replace, 
        match: match, 
        test: test, 
        parseFlags: parseFlags, 
        renderFlags: renderFlags, 
        flags: flags, 
        source: source, 
        regex: regex, 
        showRegex: showRegex
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var StateR = function (x) {
        return x;
    };
    var StateL = function (x) {
        return x;
    };
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableTuple = new Traversable(function () {
        return Data_Foldable.foldableTuple;
    }, function () {
        return Data_Tuple.functorTuple;
    }, function (__dict_Applicative_146) {
        return function (_364) {
            return Prelude["<$>"]((__dict_Applicative_146["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_364.value0))(_364.value1);
        };
    }, function (__dict_Applicative_145) {
        return function (_362) {
            return function (_363) {
                return Prelude["<$>"]((__dict_Applicative_145["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_363.value0))(_362(_363.value1));
            };
        };
    });
    var traversableMultiplicative = new Traversable(function () {
        return Data_Foldable.foldableMultiplicative;
    }, function () {
        return Data_Monoid_Multiplicative.functorMultiplicative;
    }, function (__dict_Applicative_148) {
        return function (_379) {
            return Prelude["<$>"]((__dict_Applicative_148["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(_379);
        };
    }, function (__dict_Applicative_147) {
        return function (_377) {
            return function (_378) {
                return Prelude["<$>"]((__dict_Applicative_147["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(_377(_378));
            };
        };
    });
    var traversableMaybe = new Traversable(function () {
        return Data_Foldable.foldableMaybe;
    }, function () {
        return Data_Maybe.functorMaybe;
    }, function (__dict_Applicative_150) {
        return function (_361) {
            if (_361 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_150)(Data_Maybe.Nothing.value);
            };
            if (_361 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_150["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_361.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_149) {
        return function (_359) {
            return function (_360) {
                if (_360 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_149)(Data_Maybe.Nothing.value);
                };
                if (_360 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_149["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_359(_360.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableEither = new Traversable(function () {
        return Data_Foldable.foldableEither;
    }, function () {
        return Data_Either.functorEither;
    }, function (__dict_Applicative_152) {
        return function (_358) {
            if (_358 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_152)(new Data_Either.Left(_358.value0));
            };
            if (_358 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_152["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_358.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_151) {
        return function (_356) {
            return function (_357) {
                if (_357 instanceof Data_Either.Left) {
                    return Prelude.pure(__dict_Applicative_151)(new Data_Either.Left(_357.value0));
                };
                if (_357 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_151["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_356(_357.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableDual = new Traversable(function () {
        return Data_Foldable.foldableDual;
    }, function () {
        return Data_Monoid_Dual.functorDual;
    }, function (__dict_Applicative_154) {
        return function (_370) {
            return Prelude["<$>"]((__dict_Applicative_154["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(_370);
        };
    }, function (__dict_Applicative_153) {
        return function (_368) {
            return function (_369) {
                return Prelude["<$>"]((__dict_Applicative_153["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(_368(_369));
            };
        };
    });
    var traversableAdditive = new Traversable(function () {
        return Data_Foldable.foldableAdditive;
    }, function () {
        return Data_Monoid_Additive.functorAdditive;
    }, function (__dict_Applicative_156) {
        return function (_367) {
            return Prelude["<$>"]((__dict_Applicative_156["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(_367);
        };
    }, function (__dict_Applicative_155) {
        return function (_365) {
            return function (_366) {
                return Prelude["<$>"]((__dict_Applicative_155["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(_365(_366));
            };
        };
    });
    var stateR = function (_352) {
        return _352;
    };
    var stateL = function (_351) {
        return _351;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_158) {
        return function (_355) {
            if (_355.length === 0) {
                return Prelude.pure(__dict_Applicative_158)([  ]);
            };
            if (_355.length >= 1) {
                var _1005 = _355.slice(1);
                return Prelude["<*>"](__dict_Applicative_158["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_158["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_355[0]))(sequence(traversableArray)(__dict_Applicative_158)(_1005));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_157) {
        return function (_353) {
            return function (_354) {
                if (_354.length === 0) {
                    return Prelude.pure(__dict_Applicative_157)([  ]);
                };
                if (_354.length >= 1) {
                    var _1009 = _354.slice(1);
                    return Prelude["<*>"](__dict_Applicative_157["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_157["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_353(_354[0])))(traverse(traversableArray)(__dict_Applicative_157)(_353)(_1009));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableFirst = new Traversable(function () {
        return Data_Foldable.foldableFirst;
    }, function () {
        return Data_Monoid_First.functorFirst;
    }, function (__dict_Applicative_160) {
        return function (_373) {
            return Prelude["<$>"]((__dict_Applicative_160["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(sequence(traversableMaybe)(__dict_Applicative_160)(_373));
        };
    }, function (__dict_Applicative_159) {
        return function (_371) {
            return function (_372) {
                return Prelude["<$>"]((__dict_Applicative_159["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_First.First)(traverse(traversableMaybe)(__dict_Applicative_159)(_371)(_372));
            };
        };
    });
    var traversableLast = new Traversable(function () {
        return Data_Foldable.foldableLast;
    }, function () {
        return Data_Monoid_Last.functorLast;
    }, function (__dict_Applicative_162) {
        return function (_376) {
            return Prelude["<$>"]((__dict_Applicative_162["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(sequence(traversableMaybe)(__dict_Applicative_162)(_376));
        };
    }, function (__dict_Applicative_161) {
        return function (_374) {
            return function (_375) {
                return Prelude["<$>"]((__dict_Applicative_161["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Last.Last)(traverse(traversableMaybe)(__dict_Applicative_161)(_374)(_375));
            };
        };
    });
    var zipWithA = function (__dict_Applicative_163) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray)(__dict_Applicative_163)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    var functorStateR = new Prelude.Functor(function (f) {
        return function (k) {
            return StateR(function (s) {
                var _1016 = stateR(k)(s);
                return new Data_Tuple.Tuple(_1016.value0, f(_1016.value1));
            });
        };
    });
    var functorStateL = new Prelude.Functor(function (f) {
        return function (k) {
            return StateL(function (s) {
                var _1019 = stateL(k)(s);
                return new Data_Tuple.Tuple(_1019.value0, f(_1019.value1));
            });
        };
    });
    var $$for = function (__dict_Applicative_168) {
        return function (__dict_Traversable_169) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_169)(__dict_Applicative_168)(f)(x);
                };
            };
        };
    };
    var applyStateR = new Prelude.Apply(function (f) {
        return function (x) {
            return StateR(function (s) {
                var _1022 = stateR(x)(s);
                var _1023 = stateR(f)(_1022.value0);
                return new Data_Tuple.Tuple(_1023.value0, _1023.value1(_1022.value1));
            });
        };
    }, function () {
        return functorStateR;
    });
    var applyStateL = new Prelude.Apply(function (f) {
        return function (x) {
            return StateL(function (s) {
                var _1028 = stateL(f)(s);
                var _1029 = stateL(x)(_1028.value0);
                return new Data_Tuple.Tuple(_1029.value0, _1028.value1(_1029.value1));
            });
        };
    }, function () {
        return functorStateL;
    });
    var applicativeStateR = new Prelude.Applicative(function () {
        return applyStateR;
    }, function (a) {
        return StateR(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumR = function (__dict_Traversable_164) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateR(traverse(__dict_Traversable_164)(applicativeStateR)(function (a) {
                        return StateR(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanr = function (__dict_Traversable_165) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumR(__dict_Traversable_165)(function (b) {
                        return function (a) {
                            var b$prime = f(a)(b);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    var applicativeStateL = new Prelude.Applicative(function () {
        return applyStateL;
    }, function (a) {
        return StateL(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumL = function (__dict_Traversable_166) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateL(traverse(__dict_Traversable_166)(applicativeStateL)(function (a) {
                        return StateL(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanl = function (__dict_Traversable_167) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumL(__dict_Traversable_167)(function (b) {
                        return function (a) {
                            var b$prime = f(b)(a);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        mapAccumR: mapAccumR, 
        mapAccumL: mapAccumL, 
        scanr: scanr, 
        scanl: scanl, 
        zipWithA: zipWithA, 
        "for": $$for, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray, 
        traversableEither: traversableEither, 
        traversableMaybe: traversableMaybe, 
        traversableTuple: traversableTuple, 
        traversableAdditive: traversableAdditive, 
        traversableDual: traversableDual, 
        traversableFirst: traversableFirst, 
        traversableLast: traversableLast, 
        traversableMultiplicative: traversableMultiplicative
    };
})();
var PS = PS || {};
PS.Test_QuickCheck_Gen = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    function float32ToInt32(n) {  var arr = new ArrayBuffer(4);  var fv = new Float32Array(arr);  var iv = new Int32Array(arr);  fv[0] = n;  return iv[0];};
    var Gen = (function () {
        function Gen(value0) {
            this.value0 = value0;
        };
        Gen.create = function (value0) {
            return new Gen(value0);
        };
        return Gen;
    })();
    var runGen = function (_380) {
        return _380.value0;
    };
    var stateful = function (f) {
        return new Gen(function (s) {
            return runGen(f(s))(s);
        });
    };
    var sized = function (f) {
        return stateful(function (s) {
            return f(s.size);
        });
    };
    var variant = function (n) {
        return function (g) {
            return Gen.create(function (s) {
                return runGen(g)((function () {
                    var _1036 = {};
                    for (var _1037 in s) {
                        if (s.hasOwnProperty(_1037)) {
                            _1036[_1037] = s[_1037];
                        };
                    };
                    _1036.newSeed = n;
                    return _1036;
                })());
            });
        };
    };
    var resize = function (sz) {
        return function (g) {
            return Gen.create(function (s) {
                return runGen(g)((function () {
                    var _1038 = {};
                    for (var _1039 in s) {
                        if (s.hasOwnProperty(_1039)) {
                            _1038[_1039] = s[_1039];
                        };
                    };
                    _1038.size = sz;
                    return _1038;
                })());
            });
        };
    };
    var repeatable = function (f) {
        return Gen.create(function (s) {
            return {
                value: function (a) {
                    return (runGen(f(a))(s)).value;
                }, 
                state: s
            };
        });
    };
    var lcgN = 1 << 30;
    
    /**
     * 
     *  Magic Numbers
     * 
     */
    var lcgM = 1103515245;
    var lcgC = 12345;
    var lcgNext = function (n) {
        return (lcgM * n + lcgC) % lcgN;
    };
    var lcgStep = (function () {
        var f = function (s) {
            return {
                value: s.newSeed, 
                state: (function () {
                    var _1040 = {};
                    for (var _1041 in s) {
                        if (s.hasOwnProperty(_1041)) {
                            _1040[_1041] = s[_1041];
                        };
                    };
                    _1040.newSeed = lcgNext(s.newSeed);
                    return _1040;
                })()
            };
        };
        return new Gen(f);
    })();
    var perturbGen = function (_381) {
        return function (_382) {
            return Gen.create(function (s) {
                return _382.value0((function () {
                    var _1044 = {};
                    for (var _1045 in s) {
                        if (s.hasOwnProperty(_1045)) {
                            _1044[_1045] = s[_1045];
                        };
                    };
                    _1044.newSeed = lcgNext(float32ToInt32(_381)) + s.newSeed;
                    return _1044;
                })());
            });
        };
    };
    var functorGen = new Prelude.Functor(function (_386) {
        return function (_387) {
            return Gen.create(function (s) {
                var _1049 = _387.value0(s);
                return {
                    value: _386(_1049.value), 
                    state: _1049.state
                };
            });
        };
    });
    var uniform = Prelude["<$>"](functorGen)(function (n) {
        return n / (1 << 30);
    })(lcgStep);
    var evalGen = function (gen) {
        return function (st) {
            return (runGen(gen)(st)).value;
        };
    };
    var choose = function (a) {
        return function (b) {
            var min = $$Math.min(a)(b);
            var max = $$Math.max(a)(b);
            return Prelude["<$>"](functorGen)(Prelude[">>>"](Prelude.semigroupoidArr)(Prelude["*"](Prelude.semiringNumber)(max - min))(Prelude["+"](Prelude.semiringNumber)(min)))(uniform);
        };
    };
    var chooseInt = function (a) {
        return function (b) {
            return Prelude["<$>"](functorGen)($$Math.floor)(choose($$Math.ceil(a))($$Math.floor(b) + 0.9999999989999999));
        };
    };
    var applyGen = new Prelude.Apply(function (_388) {
        return function (_389) {
            return Gen.create(function (s) {
                var _1055 = _388.value0(s);
                var _1056 = _389.value0(_1055.state);
                return {
                    value: _1055.value(_1056.value), 
                    state: _1056.state
                };
            });
        };
    }, function () {
        return functorGen;
    });
    var bindGen = new Prelude.Bind(function (_390) {
        return function (_391) {
            return Gen.create(function (s) {
                var _1065 = _390.value0(s);
                return runGen(_391(_1065.value))(_1065.state);
            });
        };
    }, function () {
        return applyGen;
    });
    var frequency = function (x) {
        return function (xs) {
            var xxs = Prelude[":"](x)(xs);
            var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude["<$>"](Data_Array.functorArray)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Monoid_Additive.Additive)(Data_Tuple.fst))(xxs)));
            var pick = function (__copy__383) {
                return function (__copy__384) {
                    return function (__copy__385) {
                        var _383 = __copy__383;
                        var _384 = __copy__384;
                        var _385 = __copy__385;
                        tco: while (true) {
                            if (_385.length === 0) {
                                return _384;
                            };
                            if (_385.length >= 1) {
                                var _1076 = _385.slice(1);
                                var _1072 = _383 <= (_385[0]).value0;
                                if (_1072) {
                                    return (_385[0]).value1;
                                };
                                if (!_1072) {
                                    var __tco__383 = _383 - (_385[0]).value0;
                                    var __tco__384 = _384;
                                    _383 = __tco__383;
                                    _384 = __tco__384;
                                    _385 = _1076;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
            return Prelude[">>="](bindGen)(chooseInt(1)(total))(function (_10) {
                return pick(_10)(Data_Tuple.snd(x))(xxs);
            });
        };
    };
    var oneOf = function (x) {
        return function (xs) {
            return Prelude[">>="](bindGen)(chooseInt(0)(Data_Array.length(xs)))(function (_9) {
                var _1079 = _9 === 0;
                if (_1079) {
                    return x;
                };
                if (!_1079) {
                    return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_9 - 1));
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var applicativeGen = new Prelude.Applicative(function () {
        return applyGen;
    }, function (a) {
        return new Gen(function (s) {
            return {
                value: a, 
                state: s
            };
        });
    });
    var elements = function (x) {
        return function (xs) {
            return Prelude[">>="](bindGen)(chooseInt(0)(Data_Array.length(xs)))(function (_15) {
                return Prelude.pure(applicativeGen)((function () {
                    var _1081 = _15 === 0;
                    if (_1081) {
                        return x;
                    };
                    if (!_1081) {
                        return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(_15 - 1));
                    };
                    throw new Error("Failed pattern match");
                })());
            });
        };
    };
    var monadGen = new Prelude.Monad(function () {
        return applicativeGen;
    }, function () {
        return bindGen;
    });
    var vectorOf = function (k) {
        return function (g) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeGen)(Prelude["<$>"](Data_Array.functorArray)(Prelude["const"](g))(Data_Array.range(1)(k)));
        };
    };
    var arrayOf = function (g) {
        return sized(function (n) {
            return Prelude[">>="](bindGen)(chooseInt(0)(n))(function (_11) {
                return vectorOf(_11)(g);
            });
        });
    };
    var arrayOf1 = function (g) {
        return sized(function (n) {
            return Prelude[">>="](bindGen)(chooseInt(0)(n))(function (_14) {
                return Prelude[">>="](bindGen)(g)(function (_13) {
                    return Prelude[">>="](bindGen)(vectorOf(_14 - 1)(g))(function (_12) {
                        return Prelude["return"](monadGen)(new Data_Tuple.Tuple(_13, _12));
                    });
                });
            });
        });
    };
    var sample = function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: 0, 
                size: sz
            });
        };
    };
    var showSample$prime = function (__dict_Show_170) {
        return function (n) {
            return function (g) {
                return Debug_Trace.print(Prelude.showArray(__dict_Show_170))(sample(n)(g));
            };
        };
    };
    var showSample = function (__dict_Show_171) {
        return showSample$prime(__dict_Show_171)(10);
    };
    return {
        "showSample'": showSample$prime, 
        showSample: showSample, 
        uniform: uniform, 
        perturbGen: perturbGen, 
        evalGen: evalGen, 
        runGen: runGen, 
        elements: elements, 
        vectorOf: vectorOf, 
        arrayOf1: arrayOf1, 
        arrayOf: arrayOf, 
        frequency: frequency, 
        oneOf: oneOf, 
        chooseInt: chooseInt, 
        choose: choose, 
        resize: resize, 
        sized: sized, 
        variant: variant, 
        stateful: stateful, 
        repeatable: repeatable, 
        functorGen: functorGen, 
        applyGen: applyGen, 
        applicativeGen: applicativeGen, 
        bindGen: bindGen, 
        monadGen: monadGen
    };
})();
var PS = PS || {};
PS.Test_QuickCheck = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Char = PS.Data_Char;
    var Test_QuickCheck_Gen = PS.Test_QuickCheck_Gen;
    var Data_String = PS.Data_String;
    var $$Math = PS.$$Math;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Array = PS.Data_Array;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Bind = PS.Control_Bind;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Success = (function () {
        function Success() {

        };
        Success.value = new Success();
        return Success;
    })();
    var Failed = (function () {
        function Failed(value0) {
            this.value0 = value0;
        };
        Failed.create = function (value0) {
            return new Failed(value0);
        };
        return Failed;
    })();
    var AlphaNumString = function (x) {
        return x;
    };
    var Arbitrary = function (arbitrary) {
        this.arbitrary = arbitrary;
    };
    var CoArbitrary = function (coarbitrary) {
        this.coarbitrary = coarbitrary;
    };
    var Testable = function (test) {
        this.test = test;
    };
    var $less$qmark$greater = function (_392) {
        return function (_393) {
            if (_392) {
                return Success.value;
            };
            if (!_392) {
                return new Failed(_393);
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  | Self-documenting equality assertion
     */
    var $eq$eq$eq = function (__dict_Eq_172) {
        return function (__dict_Show_173) {
            return function (a) {
                return function (b) {
                    var msg = Prelude.show(__dict_Show_173)(a) + (" /= " + Prelude.show(__dict_Show_173)(b));
                    return $less$qmark$greater(Prelude["=="](__dict_Eq_172)(a)(b))(msg);
                };
            };
        };
    };
    
    /**
     *  | Self-documenting inequality assertion
     */
    var $div$eq$eq = function (__dict_Eq_174) {
        return function (__dict_Show_175) {
            return function (a) {
                return function (b) {
                    var msg = Prelude.show(__dict_Show_175)(a) + (" == " + Prelude.show(__dict_Show_175)(b));
                    return $less$qmark$greater(Prelude["/="](__dict_Eq_174)(a)(b))(msg);
                };
            };
        };
    };
    var testableResult = new Testable(Prelude["return"](Test_QuickCheck_Gen.monadGen));
    var testableBoolean = new Testable(function (_401) {
        if (_401) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Success.value);
        };
        if (!_401) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(new Failed("Test returned false"));
        };
        throw new Error("Failed pattern match");
    });
    var test = function (dict) {
        return dict.test;
    };
    var showResult = new Prelude.Show(function (_394) {
        if (_394 instanceof Success) {
            return "Success";
        };
        if (_394 instanceof Failed) {
            return "Failed: " + _394.value0;
        };
        throw new Error("Failed pattern match");
    });
    var quickCheckPure = function (__dict_Testable_176) {
        return function (s) {
            var quickCheckPure$prime = function (st) {
                return function (n) {
                    return function (prop) {
                        var go = function (_402) {
                            if (_402 <= 0) {
                                return Prelude["return"](Test_QuickCheck_Gen.monadGen)([  ]);
                            };
                            return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(test(__dict_Testable_176)(prop))(function (_26) {
                                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(go(_402 - 1))(function (_25) {
                                    return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude[":"](_26)(_25));
                                });
                            });
                        };
                        return Test_QuickCheck_Gen.evalGen(go(n))(st);
                    };
                };
            };
            return quickCheckPure$prime({
                newSeed: s, 
                size: 10
            });
        };
    };
    var quickCheck$prime = function (__dict_Testable_177) {
        return function (n) {
            return function (prop) {
                var throwOnFirstFailure = function (__copy__403) {
                    return function (__copy__404) {
                        var _403 = __copy__403;
                        var _404 = __copy__404;
                        tco: while (true) {
                            if (_404.length === 0) {
                                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                            };
                            if (_404.length >= 1) {
                                var _1098 = _404.slice(1);
                                if (_404[0] instanceof Failed) {
                                    return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Prelude.show(Prelude.showNumber)(_403) + (" failed: \n" + (_404[0]).value0))));
                                };
                            };
                            if (_404.length >= 1) {
                                var _1100 = _404.slice(1);
                                var __tco__403 = _403 + 1;
                                _403 = __tco__403;
                                _404 = _1100;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                var countSuccesses = function (_405) {
                    if (_405.length === 0) {
                        return 0;
                    };
                    if (_405.length >= 1) {
                        var _1103 = _405.slice(1);
                        if (_405[0] instanceof Success) {
                            return 1 + countSuccesses(_1103);
                        };
                    };
                    if (_405.length >= 1) {
                        var _1105 = _405.slice(1);
                        return countSuccesses(_1105);
                    };
                    throw new Error("Failed pattern match");
                };
                return function __do() {
                    var _27 = Control_Monad_Eff_Random.random();
                    return (function () {
                        var results = quickCheckPure(__dict_Testable_177)(_27)(n)(prop);
                        var successes = countSuccesses(results);
                        return function __do() {
                            Debug_Trace.trace(Prelude.show(Prelude.showNumber)(successes) + ("/" + (Prelude.show(Prelude.showNumber)(n) + " test(s) passed.")))();
                            return throwOnFirstFailure(1)(results)();
                        };
                    })()();
                };
            };
        };
    };
    var quickCheck = function (__dict_Testable_178) {
        return function (prop) {
            return quickCheck$prime(__dict_Testable_178)(100)(prop);
        };
    };
    var coarbitrary = function (dict) {
        return dict.coarbitrary;
    };
    var coarbTuple = function (__dict_CoArbitrary_179) {
        return function (__dict_CoArbitrary_180) {
            return new CoArbitrary(function (_397) {
                return Prelude[">>>"](Prelude.semigroupoidArr)(coarbitrary(__dict_CoArbitrary_179)(_397.value0))(coarbitrary(__dict_CoArbitrary_180)(_397.value1));
            });
        };
    };
    var coarbNumber = new CoArbitrary(Test_QuickCheck_Gen.perturbGen);
    var coarbMaybe = function (__dict_CoArbitrary_181) {
        return new CoArbitrary(function (_399) {
            if (_399 instanceof Data_Maybe.Nothing) {
                return Test_QuickCheck_Gen.perturbGen(1);
            };
            if (_399 instanceof Data_Maybe.Just) {
                return coarbitrary(__dict_CoArbitrary_181)(_399.value0);
            };
            throw new Error("Failed pattern match");
        });
    };
    var coarbEither = function (__dict_CoArbitrary_182) {
        return function (__dict_CoArbitrary_183) {
            return new CoArbitrary(function (_398) {
                if (_398 instanceof Data_Either.Left) {
                    return coarbitrary(__dict_CoArbitrary_182)(_398.value0);
                };
                if (_398 instanceof Data_Either.Right) {
                    return coarbitrary(__dict_CoArbitrary_183)(_398.value0);
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var coarbChar = new CoArbitrary(function (c) {
        return coarbitrary(coarbNumber)(Data_Char.toCharCode(c));
    });
    var coarbBoolean = new CoArbitrary(function (_395) {
        if (_395) {
            return Test_QuickCheck_Gen.perturbGen(1);
        };
        if (!_395) {
            return Test_QuickCheck_Gen.perturbGen(2);
        };
        throw new Error("Failed pattern match");
    });
    var coarbArray = function (__dict_CoArbitrary_184) {
        return new CoArbitrary(function (_400) {
            if (_400.length === 0) {
                return Prelude.id(Prelude.categoryArr);
            };
            if (_400.length >= 1) {
                var _1118 = _400.slice(1);
                return Prelude["<<<"](Prelude.semigroupoidArr)(coarbitrary(coarbArray(__dict_CoArbitrary_184))(_1118))(coarbitrary(__dict_CoArbitrary_184)(_400[0]));
            };
            throw new Error("Failed pattern match");
        });
    };
    var coarbString = new CoArbitrary(function (s) {
        return coarbitrary(coarbArray(coarbMaybe(coarbNumber)))(Prelude["<$>"](Data_Array.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
    });
    var coarbAlphaNumString = new CoArbitrary(function (_396) {
        return coarbitrary(coarbString)(_396);
    });
    var arbitrary = function (dict) {
        return dict.arbitrary;
    };
    var testableFunction = function (__dict_Arbitrary_187) {
        return function (__dict_Testable_188) {
            return new Testable(function (f) {
                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(__dict_Arbitrary_187))(function (_24) {
                    return test(__dict_Testable_188)(f(_24));
                });
            });
        };
    };
    var arbTuple = function (__dict_Arbitrary_189) {
        return function (__dict_Arbitrary_190) {
            return new Arbitrary(Prelude["<*>"](Test_QuickCheck_Gen.applyGen)(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Tuple.Tuple.create)(arbitrary(__dict_Arbitrary_189)))(arbitrary(__dict_Arbitrary_190)));
        };
    };
    var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
    var arbFunction = function (__dict_CoArbitrary_192) {
        return function (__dict_Arbitrary_193) {
            return new Arbitrary(Test_QuickCheck_Gen.repeatable(function (a) {
                return coarbitrary(__dict_CoArbitrary_192)(a)(arbitrary(__dict_Arbitrary_193));
            }));
        };
    };
    var arbChar = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Char.fromCharCode)(Prelude["*"](Prelude.semiringNumber)(65535)))(Test_QuickCheck_Gen.uniform));
    var arbBoolean = new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.uniform)(function (_16) {
        return Prelude["return"](Test_QuickCheck_Gen.monadGen)((_16 * 2) < 1);
    }));
    var arbEither = function (__dict_Arbitrary_194) {
        return function (__dict_Arbitrary_195) {
            return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_18) {
                if (_18) {
                    return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Left.create)(arbitrary(__dict_Arbitrary_194));
                };
                if (!_18) {
                    return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Right.create)(arbitrary(__dict_Arbitrary_195));
                };
                throw new Error("Failed pattern match");
            }));
        };
    };
    var arbMaybe = function (__dict_Arbitrary_191) {
        return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_19) {
            if (_19) {
                return Prelude.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Maybe.Nothing.value);
            };
            if (!_19) {
                return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Maybe.Just.create)(arbitrary(__dict_Arbitrary_191));
            };
            throw new Error("Failed pattern match");
        }));
    };
    var arbArray = function (__dict_Arbitrary_196) {
        return new Arbitrary(Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_23) {
            if (_23) {
                return Prelude["return"](Test_QuickCheck_Gen.monadGen)([  ]);
            };
            if (!_23) {
                return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(__dict_Arbitrary_196))(function (_22) {
                    return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(__dict_Arbitrary_196)))(function (_21) {
                        return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude[":"](_22)(_21));
                    });
                });
            };
            throw new Error("Failed pattern match");
        }));
    };
    var arbString = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
    var coarbFunction = function (__dict_Arbitrary_185) {
        return function (__dict_CoArbitrary_186) {
            return new CoArbitrary(function (f) {
                return function (gen) {
                    return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(__dict_Arbitrary_185)))(function (_20) {
                        return coarbitrary(coarbArray(__dict_CoArbitrary_186))(Data_Array.map(f)(_20))(gen);
                    });
                };
            });
        };
    };
    var arbAlphaNumString = new Arbitrary((function () {
        var lookup = function (x) {
            var index = $$Math.round(x * (Data_String.length("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") - 1));
            return Data_String_Unsafe.charAt(index)("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
        };
        return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(arbNumber)))(function (_17) {
            return Prelude["return"](Test_QuickCheck_Gen.monadGen)(Prelude["<<<"](Prelude.semigroupoidArr)(AlphaNumString)(Data_String.fromCharArray)(Prelude["<$>"](Data_Array.functorArray)(lookup)(_17)));
        });
    })());
    return {
        AlphaNumString: AlphaNumString, 
        Success: Success, 
        Failed: Failed, 
        Testable: Testable, 
        CoArbitrary: CoArbitrary, 
        Arbitrary: Arbitrary, 
        "/==": $div$eq$eq, 
        "===": $eq$eq$eq, 
        quickCheck: quickCheck, 
        "quickCheck'": quickCheck$prime, 
        quickCheckPure: quickCheckPure, 
        test: test, 
        "<?>": $less$qmark$greater, 
        coarbitrary: coarbitrary, 
        arbitrary: arbitrary, 
        showResult: showResult, 
        arbChar: arbChar, 
        coarbChar: coarbChar, 
        arbNumber: arbNumber, 
        coarbNumber: coarbNumber, 
        arbBoolean: arbBoolean, 
        coarbBoolean: coarbBoolean, 
        arbString: arbString, 
        coarbString: coarbString, 
        arbAlphaNumString: arbAlphaNumString, 
        coarbAlphaNumString: coarbAlphaNumString, 
        arbTuple: arbTuple, 
        coarbTuple: coarbTuple, 
        arbEither: arbEither, 
        coarbEither: coarbEither, 
        arbMaybe: arbMaybe, 
        coarbMaybe: coarbMaybe, 
        arbFunction: arbFunction, 
        coarbFunction: coarbFunction, 
        arbArray: arbArray, 
        coarbArray: coarbArray, 
        testableResult: testableResult, 
        testableBoolean: testableBoolean, 
        testableFunction: testableFunction
    };
})();
var PS = PS || {};
PS.Chapter4 = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Array_Unsafe = PS.Data_Array_Unsafe;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Path = PS.Data_Path;
    var Data_Maybe = PS.Data_Maybe;
    var $less$dollar$qmark$greater = Data_Array.filter;
    var triples = function (n) {
        return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](3)(n))(function (_34) {
            return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](_34)(n))(function (_33) {
                return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](_33)(n))(function (_32) {
                    return Prelude[">>="](Data_Array.bindArray)(Control_MonadPlus.guard(Data_Array.monadPlusArray)(_34 * _34 + _33 * _33 === _32 * _32))(function () {
                        return Prelude["return"](Data_Array.monadArray)([ _34, _33, _32 ]);
                    });
                });
            });
        });
    };
    
    /**
     *  Second set of exercises
     */
    var squareAll = Data_Array.map(function (n) {
        return n * n;
    });
    var reverse = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (xs) {
        return function (x) {
            return Prelude["++"](Data_Array.semigroupArray)([ x ])(xs);
        };
    })([  ]);
    var removeNegatives = Data_Array.filter(function (n) {
        return n >= 0;
    });
    
    /**
     *  Third set of exercises
     */
    var factors = function (n) {
        return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](1)(n))(function (_29) {
            return Prelude[">>="](Data_Array.bindArray)(Data_Array[".."](_29)(n))(function (_28) {
                return Prelude[">>="](Data_Array.bindArray)(Control_MonadPlus.guard(Data_Array.monadPlusArray)(_29 * _28 === n))(function () {
                    return Prelude["return"](Data_Array.monadArray)([ _29, _28 ]);
                });
            });
        });
    };
    var isPrime = Prelude["<<<"](Prelude.semigroupoidArr)(function (_1) {
        return _1 === 1;
    })(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.length)(factors));
    
    /**
     *  First set of exercises
     */
    var even = function (__copy_n) {
        var n = __copy_n;
        tco: while (true) {
            var _1137 = n < 0;
            if (_1137) {
                var __tco_n = -n;
                n = __tco_n;
                continue tco;
            };
            if (!_1137) {
                var _1138 = n === 0;
                if (_1138) {
                    return true;
                };
                if (!_1138) {
                    var _1139 = n === 1;
                    if (_1139) {
                        return false;
                    };
                    if (!_1139) {
                        var __tco_n = n - 2;
                        n = __tco_n;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
                throw new Error("Failed pattern match");
            };
            throw new Error("Failed pattern match");
        };
    };
    var countEven = function (xs) {
        var _1140 = Data_Array["null"](xs);
        if (_1140) {
            return 0;
        };
        if (!_1140) {
            var _1141 = even(Data_Array_Unsafe.head(xs));
            if (_1141) {
                return (function (_0) {
                    return _0 + 1;
                })(countEven(Data_Array_Unsafe.tail(xs)));
            };
            if (!_1141) {
                return countEven(Data_Array_Unsafe.tail(xs));
            };
            throw new Error("Failed pattern match");
        };
        throw new Error("Failed pattern match");
    };
    var count = function (p) {
        return function (xs) {
            var count$prime = function (__copy__406) {
                return function (__copy__407) {
                    return function (__copy__408) {
                        var _406 = __copy__406;
                        var _407 = __copy__407;
                        var _408 = __copy__408;
                        tco: while (true) {
                            if (_407.length === 0) {
                                return _408;
                            };
                            if (_407.length >= 1) {
                                var _1147 = _407.slice(1);
                                var _1145 = _406(_407[0]);
                                if (_1145) {
                                    var __tco__406 = _406;
                                    var __tco__408 = _408 + 1;
                                    _406 = __tco__406;
                                    _407 = _1147;
                                    _408 = __tco__408;
                                    continue tco;
                                };
                                if (!_1145) {
                                    var __tco__406 = _406;
                                    var __tco__408 = _408;
                                    _406 = __tco__406;
                                    _407 = _1147;
                                    _408 = __tco__408;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
            return count$prime(p)(xs)(0);
        };
    };
    var cartProd = function (xs) {
        return function (ys) {
            return Prelude[">>="](Data_Array.bindArray)(xs)(function (_31) {
                return Prelude[">>="](Data_Array.bindArray)(ys)(function (_30) {
                    return Prelude["return"](Data_Array.monadArray)([ _31, _30 ]);
                });
            });
        };
    };
    
    /**
     *  Fourth set of exercises
     */
    var allTrue = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (x) {
        return function (acc) {
            return x && acc;
        };
    })(true);
    
    /**
     *  Fifth set of exercises
     */
    var allFiles = function (file) {
        return Prelude[":"](file)(Data_Array.concatMap(allFiles)(Data_Path.ls(file)));
    };
    var onlyFiles = (function () {
        var isFile = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(Data_Path.isDirectory);
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.filter(isFile))(allFiles);
    })();
    var largestFile = (function () {
        var size$prime = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.fromMaybe(-1))(Data_Path.size);
        var restFiles = Data_Array_Unsafe.tail(onlyFiles(Data_Path.root));
        var firstFile = Data_Array_Unsafe.head(onlyFiles(Data_Path.root));
        var fileCompare = function (x) {
            return function (acc) {
                var _1150 = size$prime(x) > size$prime(acc);
                if (_1150) {
                    return x;
                };
                if (!_1150) {
                    return acc;
                };
                throw new Error("Failed pattern match");
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(fileCompare)(firstFile)(restFiles);
    })();
    return {
        largestFile: largestFile, 
        onlyFiles: onlyFiles, 
        allFiles: allFiles, 
        reverse: reverse, 
        count: count, 
        allTrue: allTrue, 
        triples: triples, 
        cartProd: cartProd, 
        isPrime: isPrime, 
        factors: factors, 
        "<$?>": $less$dollar$qmark$greater, 
        removeNegatives: removeNegatives, 
        squareAll: squareAll, 
        countEven: countEven, 
        even: even
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Debug_Trace = PS.Debug_Trace;
    var Test_QuickCheck = PS.Test_QuickCheck;
    var Chapter4 = PS.Chapter4;
    var $$Math = PS.$$Math;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var main = function __do() {
        Debug_Trace.trace("Even numbers should be even.")();
        Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck.arbNumber)(Test_QuickCheck.testableBoolean))(100)(function (n) {
            return Chapter4.even(2 * $$Math.round(n)) === true;
        })();
        Debug_Trace.trace("Odd numbers should be odd.")();
        return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck.arbNumber)(Test_QuickCheck.testableBoolean))(100)(function (n) {
            return Chapter4.even(1 + 2 * $$Math.round(n)) === false;
        })();
    };
    return {
        main: main
    };
})();
PS.Main.main();
